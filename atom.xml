<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
  <title><![CDATA[JellyBin's博客]]></title>
  <subtitle><![CDATA[一介码农，一只程序猿]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://jellybins.github.io//"/>
  <updated>2015-08-18T00:24:33.985Z</updated>
  <id>http://jellybins.github.io//</id>
  
  <author>
    <name><![CDATA[Jelly Bins]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[SQLServer创建登录用户错误]]></title>
    <link href="http://jellybins.github.io/2014/08/17/SQLServer%E5%88%9B%E5%BB%BA%E7%99%BB%E5%BD%95%E7%94%A8%E6%88%B7%E9%94%99%E8%AF%AF/"/>
    <id>http://jellybins.github.io/2014/08/17/SQLServer创建登录用户错误/</id>
    <published>2014-08-17T09:42:19.000Z</published>
    <updated>2015-08-18T00:24:33.985Z</updated>
    <content type="html"><![CDATA[<h2 id="错误描述">错误描述</h2><p>在Microsoft SQLServer 还原数据库后，要创建登录该数据库的用户结果提示“错误15023:当前数据库中已存在用户或角色”或“用户、组或角色 在当前数据库中已存在”。</p>
<h2 id="原因及解决办法">原因及解决办法</h2><ul>
<li>原因：<br>SQLServer中登录用户名与数据库用户用户名的区别。登录用户名用于用户身份验证，而数据库用户用户名用于数据库访问和权限验证。登录用户通过安全识别符 (SID) 与数据库用户关联。将数据库恢复到其他服务器时，数据库中包含一组用户和权限，但可能没有相应的登录用户或者登录所关联的用户可能不是相同的用户。这种情况被称为存在“孤立用户”。</li>
<li>解决办法：<br>调用系统存储过程sp_change_users_login，具体用法如下：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">use</span> 数据库名</span><br><span class="line"><span class="keyword">go</span></span><br><span class="line">sp_change_users_login <span class="string">'update_one'</span>, <span class="string">'用户名'</span>,<span class="string">'用户名'</span></span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>其中数据库名为存在孤立用户的数据库，update_one是存储过程的参数，表示只处理一个用户，前一个用户名是数据库用户，后一个用户名是用来数据库登录，以上这个SQL命令表示将数据库用户用户名与服务器登录用户名重新连接起来。这样就可以正常使用数据库了。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="错误描述">错误描述</h2><p>在Microsoft SQLServer 还原数据库后，要创建登录该数据库的用户结果提示“错误15023:当前数据库中已存在用户或角色”或“用户、组或角色 在当前数据库中已存在”。</p>
<h2 id="原因及解决办法">原因]]>
    </summary>
    
      <category term="数据库" scheme="http://jellybins.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[原码，反码，补码详解（转）]]></title>
    <link href="http://jellybins.github.io/2013/09/21/%E5%8E%9F%E7%A0%81%EF%BC%8C%E5%8F%8D%E7%A0%81%EF%BC%8C%E8%A1%A5%E7%A0%81%E8%AF%A6%E8%A7%A3%EF%BC%88%E8%BD%AC%EF%BC%89/"/>
    <id>http://jellybins.github.io/2013/09/21/原码，反码，补码详解（转）/</id>
    <published>2013-09-21T08:34:59.000Z</published>
    <updated>2015-08-19T08:54:58.485Z</updated>
    <content type="html"><![CDATA[<p>说起要转载的这篇文章还有个故事，开发工作中涉及通讯协议的部分，一直在用Windows系统自带的计算器（程序员模式）计算各种标志位掩码的真实值，偶然的机会同事问我有个二进制值为什么转换出来是负数而不是想要的值，而我转换的过程从来没有发现这个问题，结果不同之处就是在字长的选择上，同样的二进制10000000，当选择字节后转换为十进制时，结果是-128，而在其它字长（如字，双字，四字）的情况下就是128，然后就惊奇的发现了一个错了好多年的认知 ——“Windows计算器里的二进制表示是原码显示”（补码显示才对），然后就想起了大学时好多课程里提到的原反补码，于是也就找到了这篇简明扼要的介绍原反补码的文章。</p>
<h2 id="一-_机器数和真值">一. 机器数和真值</h2><p>在学习原码, 反码和补码之前， 需要先了解机器数和真值的概念。</p>
<ol>
<li><p>机器数</p>
<p>一个数在计算机中的二进制表示形式， 叫做这个数的机器数。机器数是带符号的，在计算机用一个数的最高位存放符号，正数为0，负数为1。</p>
<p>比如，十进制中的数 +3 ，计算机字长为8位，转换成二进制就是00000011。如果是 -3 ，就是 10000011。</p>
<p>那么，这里的 00000011 和 10000011 就是机器数。</p>
</li>
<li><p>真值</p>
<blockquote>
<p>因为第一位是符号位，所以机器数的形式值就不等于真正的数值。例如上面的有符号数 10000011，其最高位1代表负，其真正数值是 -3 而不是形式值131（10000011转换成十进制等于131）。所以，为区别起见，将带符号位的机器数对应的真正数值称为机器数的真值。</p>
</blockquote>
<p>例：0000 0001的真值 = +000 0001 = +1，1000 0001的真值 = –000 0001 = –1</p>
</li>
</ol>
<h2 id="二-_原码，反码，补码的基础概念和计算方法">二. 原码，反码，补码的基础概念和计算方法</h2><p>在探求为何机器要使用补码之前, 让我们先了解原码, 反码和补码的概念.对于一个数, 计算机要使用一定的编码方式进行存储. 原码, 反码, 补码是机器存储一个具体数字的编码方式.</p>
<ol>
<li><p>原码</p>
<p> 原码就是符号位加上真值的绝对值，即用第一位表示符号，其余位表示值。比如如果是8位二进制:</p>
<blockquote>
<p>[+1]<sub>原</sub> = 0000 0001</p>
<p>[-1]<sub>原</sub>  = 1000 0001</p>
</blockquote>
<p> 第一位是符号位。因为第一位是符号位，所以8位二进制数的取值范围就是：</p>
<p> [1111 1111 , 0111 1111] 即 [-127 , 127]</p>
<p> 原码是人脑最容易理解和计算的表示方式。</p>
</li>
<li><p>反码</p>
<p> 反码的表示方法是:</p>
<ul>
<li><p>正数的反码是其本身</p>
</li>
<li><p>负数的反码是在其原码的基础上，符号位不变，其余各个位取反。</p>
<blockquote>
<p>[+1] = [00000001]<sub>原</sub> = [00000001]<sub>反</sub></p>
<p>[-1] = [10000001]<sub>原</sub> = [11111110]<sub>反</sub></p>
</blockquote>
<p>可见如果一个反码表示的是负数，人脑无法直观的看出来它的数值。 通常要将其转换成原码再计算。</p>
</li>
</ul>
</li>
<li><p>补码</p>
<p> 补码的表示方法是:</p>
<ul>
<li><p>正数的补码就是其本身</p>
</li>
<li><p>负数的补码是在其原码的基础上, 符号位不变, 其余各位取反, 最后+1. (即在反码的基础上+1)</p>
<blockquote>
<p>[+1] = [00000001]<sub>原</sub> = [00000001]<sub>反</sub> = [00000001]<sub>补</sub></p>
<p>[-1] = [10000001]<sub>原</sub> = [11111110]<sub>反</sub> = [11111111]<sub>补</sub></p>
</blockquote>
<p>对于负数, 补码表示方式也是人脑无法直观看出其数值的. 通常也需要转换成原码在计算其数值.</p>
</li>
</ul>
</li>
</ol>
<h2 id="三-_为何要使用原码，反码和补码">三. 为何要使用原码，反码和补码</h2><p>在开始深入学习前, 我的学习建议是先”死记硬背”上面的原码, 反码和补码的表示方式以及计算方法.</p>
<p>现在我们知道了计算机可以有三种编码方式表示一个数. 对于正数因为三种编码方式的结果都相同:</p>
<blockquote>
<p>[+1] = [00000001]<sub>原</sub> = [00000001]<sub>反</sub> = [00000001]<sub>补</sub></p>
</blockquote>
<p>所以不需要过多解释. 但是对于负数:</p>
<blockquote>
<p>[-1] = [10000001]<sub>原</sub> = [11111110]<sub>反</sub> = [11111111]<sub>补</sub></p>
</blockquote>
<p>可见原码, 反码和补码是完全不同的. 既然原码才是被人脑直接识别并用于计算表示方式, 为何还会有反码和补码呢?</p>
<p>首先, 因为人脑可以知道第一位是符号位, 在计算的时候我们会根据符号位, 选择对真值区域的加减. (真值的概念在本文最开头). 但是对于计算机, 加减乘数已经是最基础的运算, 要设计的尽量简单. 计算机辨别”符号位”显然会让计算机的基础电路设计变得十分复杂! 于是人们想出了将符号位也参与运算的方法. 我们知道, 根据运算法则减去一个正数等于加上一个负数, 即: 1-1 = 1 + (-1) = 0 , 所以机器可以只有加法而没有减法, 这样计算机运算的设计就更简单了.</p>
<p>于是人们开始探索 将符号位参与运算, 并且只保留加法的方法. 首先来看原码:</p>
<p>计算十进制的表达式: 1-1=0</p>
<blockquote>
<p>1 - 1 = 1 + (-1) = [00000001]<sub>原</sub> + [10000001]<sub>原</sub> = [10000010]<sub>原</sub> = -2</p>
</blockquote>
<p>如果用原码表示, 让符号位也参与计算, 显然对于减法来说, 结果是不正确的.这也就是为何计算机内部不使用原码表示一个数.</p>
<p>为了解决原码做减法的问题, 出现了反码:</p>
<p>计算十进制的表达式: 1-1=0</p>
<blockquote>
<p>1 - 1 = 1 + (-1) = [0000 0001]<sub>原</sub> + [1000 0001]<sub>原</sub>= [0000 0001]<sub>反</sub> + [1111 1110]<sub>反</sub> = [1111 1111]<sub>反</sub> = [1000 0000]<sub>原</sub> = -0</p>
</blockquote>
<p>发现用反码计算减法, 结果的真值部分是正确的. 而唯一的问题其实就出现在”0”这个特殊的数值上. 虽然人们理解上+0和-0是一样的, 但是0带符号是没有任何意义的. 而且会有[0000 0000]<sub>原</sub>和[1000 0000]<sub>原</sub>两个编码表示0.</p>
<p>于是补码的出现, 解决了0的符号以及两个编码的问题:</p>
<blockquote>
<p>1-1 = 1 + (-1) = [0000 0001]<sub>原</sub> + [1000 0001]<sub>原</sub> = [0000 0001]<sub>补</sub> + [1111 1111]<sub>补</sub> = [0000 0000]<sub>补</sub>=[0000 0000]<sub>原</sub></p>
</blockquote>
<p>这样0用[0000 0000]表示, 而以前出现问题的-0则不存在了.而且可以用[1000 0000]表示-128:</p>
<blockquote>
<p>(-1) + (-127) = [1000 0001]<sub>原</sub> + [1111 1111]<sub>原</sub> = [1111 1111]<sub>补</sub> + [1000 0001]<sub>补</sub> = [1000 0000]<sub>补</sub></p>
</blockquote>
<p>-1-127的结果应该是-128, 在用补码运算的结果中, [1000 0000]<sub>补</sub> 就是-128. 但是注意因为实际上是使用以前的-0的补码来表示-128, 所以-128并没有原码和反码表示.(对-128的补码表示[1000 0000]<sub>补</sub>算出来的原码是[0000 0000]<sub>原</sub>, 这是不正确的)</p>
<p>使用补码, 不仅仅修复了0的符号以及存在两个编码的问题, 而且还能够多表示一个最低数. 这就是为什么8位二进制, 使用原码或反码表示的范围为[-127, +127], 而使用补码表示的范围为[-128, 127].</p>
<p>因为机器使用补码, 所以对于编程中常用到的32位int类型, 可以表示范围是: [-231, 231-1] 因为第一位表示的是符号位.而使用补码表示时又可以多保存一个最小值.</p>
<p>Ps：<a href="http://www.cnblogs.com/zhangziqiu/archive/2011/03/30/ComputerCode.html" target="_blank" rel="external">原文</a> 下面还有讲解原反补码的再深入的第四部分这里就不做摘要了。</p>
<p>测试 <sup> 上标 </sup><br>测试 <sub> 下标 </sub></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>说起要转载的这篇文章还有个故事，开发工作中涉及通讯协议的部分，一直在用Windows系统自带的计算器（程序员模式）计算各种标志位掩码的真实值，偶然的机会同事问我有个二进制值为什么转换出来是负数而不是想要的值，而我转换的过程从来没有发现这个问题，结果不同之处就是在字长的选择上]]>
    </summary>
    
      <category term="计算机基础" scheme="http://jellybins.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[查看Ubuntu版本号]]></title>
    <link href="http://jellybins.github.io/2013/08/19/%E6%9F%A5%E7%9C%8BUbuntu%E7%89%88%E6%9C%AC%E5%8F%B7/"/>
    <id>http://jellybins.github.io/2013/08/19/查看Ubuntu版本号/</id>
    <published>2013-08-19T07:04:45.000Z</published>
    <updated>2015-08-19T07:30:00.259Z</updated>
    <content type="html"><![CDATA[<h2 id="方法一：">方法一：</h2><p>在终端中执行下列指令：</p>
<blockquote>
<p><strong>cat /etc/issue</strong></p>
</blockquote>
<p>可以查看当前正在运行的 Ubuntu 的版本号。其输出结果类似下面的内容：</p>
<blockquote>
<p>Ubuntu 14.04.2 LTS</p>
</blockquote>
<h2 id="方法二：">方法二：</h2><p>使用 lsb_release 命令也可以查看 Ubuntu 的版本号，与方法一相比，内容更为详细。执行指令如下：</p>
<blockquote>
<p><strong>lsb_release -a</strong></p>
</blockquote>
<p>将输出结果：</p>
<blockquote>
<p>Distributor ID: Ubuntu<br>Description: Ubuntu 14.04.2 LTS<br>Release: 14.04<br>Codename: trusty</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="方法一：">方法一：</h2><p>在终端中执行下列指令：</p>
<blockquote>
<p><strong>cat /etc/issue</strong></p>
</blockquote>
<p>可以查看当前正在运行的 Ubuntu 的版本号。其输出结果]]>
    </summary>
    
      <category term="Linux" scheme="http://jellybins.github.io/categories/Linux/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[apt-get upgrade和dist-upgrade的区别]]></title>
    <link href="http://jellybins.github.io/2013/08/18/apt-get-upgrade%E5%92%8Cdist-upgrade%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://jellybins.github.io/2013/08/18/apt-get-upgrade和dist-upgrade的区别/</id>
    <published>2013-08-18T07:24:41.000Z</published>
    <updated>2015-08-19T07:41:01.738Z</updated>
    <content type="html"><![CDATA[<p>Debian/Ubuntu Linux使用apt升级时都是执行如下命令:</p>
<blockquote>
<p><strong>apt-get update<br>apt-get upgrade（或）apt-get dist-upgrade</strong></p>
</blockquote>
<p>但是常常有人会问，upgrade和dist-upgrade有何不同，仔细查查，似乎大家对upgrade和dist-upgrade的解释都有点不同,在此也记录下自己的看法.</p>
<ul>
<li><p><strong>upgrade</strong>：系统将现有的Package升级，如果有相依性的问题，而此相依性需要安装其它新的Package或影响到其它Package的相依性时，此Package就不会被升级，会保留下来。</p>
</li>
<li><p><strong>dist-upgrade</strong>：可以聪明的解决相依性的问题，如果有相依性问题，需要安装/移除新的Package，就会试着去安装/移除它(所以通常这个会被认为是有点风险的升级)。</p>
</li>
<li><p><strong>总结</strong>：apt-get upgrade 和 apt-get dist-upgrade 本质上是没有什么不同的。只不过，dist-upgrade会识别出当依赖关系改变的情形并作出处理，而upgrade对此情形不处理。</p>
</li>
<li><p><strong>示例</strong>：如软件包 a 原先依赖 b c d，但是在源里面可能已经升级了，现在是 a 依赖 b c e。这种情况下，dist-upgrade 会删除 d 安装 e，并把 a 软件包升级，而 upgrade 会认为<br>依赖关系改变而拒绝升级 a 软件包。</p>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>Debian/Ubuntu Linux使用apt升级时都是执行如下命令:</p>
<blockquote>
<p><strong>apt-get update<br>apt-get upgrade（或）apt-get dist-upgrade</strong></p>
</]]>
    </summary>
    
      <category term="Linux" scheme="http://jellybins.github.io/categories/Linux/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hibernate实体关系判断]]></title>
    <link href="http://jellybins.github.io/2013/08/17/HIBERNATE%E5%AE%9E%E4%BD%93%E5%85%B3%E7%B3%BB%E9%85%8D%E7%BD%AE/"/>
    <id>http://jellybins.github.io/2013/08/17/HIBERNATE实体关系配置/</id>
    <published>2013-08-17T07:01:41.000Z</published>
    <updated>2015-08-17T07:50:37.013Z</updated>
    <content type="html"><![CDATA[<p>在使用hibernate配置实体间关系时，对于我总有个解不开的魔咒——思考两个实体间到底是一对一、一对多还是多对多的时候我总爱从指定的唯一个体出发来思考。比如学生和班级是很明显的一对多关系，但是从具体的个体出发，具体的某个学生只有一个具体的班级跟他相对应，变成了一对一关系然后就配置错误了，每次配置的时候都会跟自己强调千万要注意，但还是不长脑子，然后就在我要放弃治疗的时候突然在草稿上摸索出了这个关系总结的表格（让头脑比较清醒的淫们贱笑了哈，就当这是还算正确的歪理邪说好了），都是从固定个体出发，经我初步验证是正确的。</p>
<p>比如还是上面的例子——（学生和班级）</p>
<ol>
<li>固定的学生到班级 （正向） 一对一 （固定学生存在一个班级）</li>
<li>固定班级到学生 （反向） 多对一 （固定班级有多个学生）</li>
<li>学生到班级 （关系配置） 一对多</li>
</ol>
<p>再举一个例子——（学生和课程）</p>
<ol>
<li>固定学生到课程 （正向） 一对多（固定学生可选多门课）</li>
<li>固定课程到学生（反向） 一对多 （固定课程可供多个学生选）</li>
<li>学生到课程 （关系配置） 多对多</li>
</ol>
<hr>
<h2 id="关系总结">关系总结</h2><table>
<thead>
<tr>
<th style="text-align:center">正向</th>
<th style="text-align:center">反向</th>
<th style="text-align:center">关系配置</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">一对一</td>
<td style="text-align:center">多对一</td>
<td style="text-align:center">一对多</td>
</tr>
<tr>
<td style="text-align:center">一对多</td>
<td style="text-align:center">一对多</td>
<td style="text-align:center">多对多</td>
</tr>
<tr>
<td style="text-align:center">一对一</td>
<td style="text-align:center">一对一</td>
<td style="text-align:center">一对一</td>
</tr>
<tr>
<td style="text-align:center">多对一</td>
<td style="text-align:center">一对一</td>
<td style="text-align:center">多对一</td>
</tr>
</tbody>
</table>
]]></content>
    <summary type="html">
    <![CDATA[<p>在使用hibernate配置实体间关系时，对于我总有个解不开的魔咒——思考两个实体间到底是一对一、一对多还是多对多的时候我总爱从指定的唯一个体出发来思考。比如学生和班级是很明显的一对多关系，但是从具体的个体出发，具体的某个学生只有一个具体的班级跟他相对应，变成了一对一关系然]]>
    </summary>
    
      <category term="Hibernate" scheme="http://jellybins.github.io/categories/Hibernate/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[从Ubuntu LTS版本升级至普通版本]]></title>
    <link href="http://jellybins.github.io/2013/08/15/%E4%BB%8EUbuntu-LTS%E7%89%88%E6%9C%AC%E5%8D%87%E7%BA%A7%E8%87%B3%E6%99%AE%E9%80%9A%E7%89%88%E6%9C%AC/"/>
    <id>http://jellybins.github.io/2013/08/15/从Ubuntu-LTS版本升级至普通版本/</id>
    <published>2013-08-15T07:08:45.000Z</published>
    <updated>2015-08-19T07:26:47.666Z</updated>
    <content type="html"><![CDATA[<h2 id="以Ubuntu_14-04_LTS版本升级至14-10_普通版本为例">以Ubuntu 14.04 LTS版本升级至14.10 普通版本为例</h2><ol>
<li><p>首先更新一下系统：</p>
<blockquote>
<p><strong>sudo apt-get update<br>sudo apt-get dist-upgrade</strong></p>
</blockquote>
</li>
<li><p>接下来，需要安装更新管理器的核心：</p>
<blockquote>
<p><strong>sudo apt-get install update-manager-core<br>sudo do-release-upgrade -d</strong></p>
</blockquote>
</li>
</ol>
<blockquote>
<p>命令解释：do-release-upgrade 命令是帮助我们寻找最新的稳定版本，而 -d 参数意思是包括非稳定版本。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="以Ubuntu_14-04_LTS版本升级至14-10_普通版本为例">以Ubuntu 14.04 LTS版本升级至14.10 普通版本为例</h2><ol>
<li><p>首先更新一下系统：</p>
<blockquote>
<p><strong>sudo ap]]>
    </summary>
    
      <category term="Linux" scheme="http://jellybins.github.io/categories/Linux/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用Hexo在GitHub上搭建静态博客]]></title>
    <link href="http://jellybins.github.io/2013/07/16/%E4%BD%BF%E7%94%A8Hexo%E5%9C%A8GitHub%E4%B8%8A%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/"/>
    <id>http://jellybins.github.io/2013/07/16/使用Hexo在GitHub上搭建静态博客/</id>
    <published>2013-07-16T08:32:23.000Z</published>
    <updated>2015-08-19T07:28:01.585Z</updated>
    <content type="html"><![CDATA[<p>当初搭建这个静态博客参考了好几篇文章，但是还是碰到了不少问题，想想应该整理一下让后来人少走点弯路，我就是这么伟大，请给我点32个赞（此处应有掌声）。</p>
<h2 id="工欲善其事_必先利其器">工欲善其事 必先利其器</h2><ol>
<li><p>Git客户端(博客部署)</p>
<p><a href="https://windows.github.com/" target="_blank" rel="external">GitHub for Windows（已更名为GitHub Desktop） 下载</a></p>
<blockquote>
<p>GitHub for Windows是先下载安装器，然后运行安装器在线安装，如果在线安装过程中出现下载进度不动或下载不成功的情况，恭喜你被墙了，请自行查找科学上网方法，设置为系统全局代理后再尝试。</p>
</blockquote>
</li>
<li><p>Node.js(Hexo依赖)</p>
<p><a href="https://nodejs.org/" target="_blank" rel="external">Node.js 下载</a></p>
<blockquote>
<p>Node.js安装完成后会自动添加环境变量，如果在步骤3中使用npm命令提示不存在，则请自行在环境变量Path中添加如下内容（默认Node.js安装目录为C:\Program Files\nodejs）：<br><strong>;C:\Program Files\nodejs\node_modules\npm</strong></p>
</blockquote>
</li>
<li><p>Hexo(博客框架，使用Markdown解析文章)</p>
<p><a href="https://hexo.io/zh-cn/" target="_blank" rel="external">Hexo 官网（无需下载）</a></p>
<blockquote>
<p>完成上述步骤后，双击桌面上的Git Shell，输入如下npm命令回车执行等待安装完成即可：<br><strong>npm install -g hexo-cli</strong></p>
</blockquote>
</li>
<li><p>创建Hexo工作空间</p>
<blockquote>
<p>安装 Hexo 完成后，在磁盘任意位置建立文件夹比如D:/hexo,双击桌面上Git Shell，通过CD命令切换到该目录后执行如下两行命令初始化该工作空间并安装hexo所有插件：<br><strong>hexo init</strong><br><strong>npm install</strong></p>
</blockquote>
</li>
</ol>
<h2 id="创建博客容身之所">创建博客容身之所</h2><ul>
<li>注册GitHub账号</li>
</ul>
<ol>
<li><p>登录<a href="https://github.com/" target="_blank" rel="external">GitHub</a>，选择Sign Up注册GitHub账户，注意此处注册的账号名称决定将来访问你的博客的路径。比如你注册的账号用户名为jellybins（以下部分也用该示例），则将来访问你博客的路径为<a href="http://jellybins.github.io。" target="_blank" rel="external">http://jellybins.github.io。</a></p>
</li>
<li><p>创建GitHub博客仓储，注册完成后登录GitHub选择New Repository，创建名称为jellybins.github.io的Repository(jellybins为示例，必须保证Repository名称中该部分和注册账户名称一致)。</p>
</li>
<li><p>首次创建后等待几分钟左右审核，之后即可访问静态主页如<a href="http://jellybins.github.io（jellybins为示例）" target="_blank" rel="external">http://jellybins.github.io（jellybins为示例）</a> 。</p>
</li>
</ol>
<ul>
<li>登录GitHub for Windows，部署博客内容至GitHub</li>
</ul>
<ol>
<li><p>双击击桌面上GitHub 图标，登录上述注册的GitHub账户，程序会自动设置GitHub全局变量并添加SSH访问密钥。</p>
</li>
<li><p>进入Hexo工作空间目录中，用记事本等文本编辑器打开_config.yml文件，更改deploy项内容如下（注意上述键和值之间有空格，格式不正确会导致部署失败，jellybins为示例，请更改为自己注册的账户名）：</p>
<blockquote>
<p><strong>deploy:<br>type: git<br>repo: git@github.com:jellybins/jellybins.github.io.git</strong></p>
</blockquote>
</li>
<li><p>双击桌面上Git Shell图标，通过CD命令切换到Hexo工作空间目录，然后执行如下命令完成博客部署至GitHub</p>
<blockquote>
<p><strong>hexo clean<br>hexo generate<br>hexo server（可选命令——本地<a href="http://localhost:4000端口预览博客效果，快捷键Ctrl+C停止预览）" target="_blank" rel="external">http://localhost:4000端口预览博客效果，快捷键Ctrl+C停止预览）</a><br>hexo deploy</strong></p>
</blockquote>
</li>
<li><p>以后每次完成新博客文章要发布时，重新执行步骤3中各命令即可。</p>
</li>
<li><p>访问博客地址<a href="http://jellybins.github.io查看效果（jellybins为示例）。" target="_blank" rel="external">http://jellybins.github.io查看效果（jellybins为示例）。</a></p>
</li>
</ol>
<h2 id="博客设置及主题更换">博客设置及主题更换</h2><ol>
<li><p>进入Hexo工作空间目录，用记事本或EditPlus等文本编辑工具打开_config.yml文件。</p>
</li>
<li><p>各参数作用：</p>
<ul>
<li>title        网站标题</li>
<li>subtitle       网站副标题</li>
<li>description  网站描述</li>
<li>author       您的名字</li>
<li>language     网站使用的语言</li>
<li>theme        当前主题名称（通过更改该名称更改博客使用的主题）</li>
<li>deploy       部署配置（上面将博客部署至GitHub已提到）</li>
</ul>
</li>
<li><p>上述各参数的值在书写时一定要注意每项参数冒号后要有一个英文空格符，然后再填写该项的值。</p>
</li>
<li><p>更改主题方法：</p>
<p>a. 从<a href="https://github.com/hexojs/hexo/wiki/Themes" target="_blank" rel="external">该链接</a>选择你想要使用的Hexo主题。</p>
<p>b. 双击Git Shell图标，CD命令切换至Hexo工作空间目录后，执行如下命令（以yilia主题为例）:</p>
<blockquote>
<p><strong>git clone <a href="https://github.com/litten/hexo-theme-yilia.git" target="_blank" rel="external">https://github.com/litten/hexo-theme-yilia.git</a> themes/yilia</strong></p>
</blockquote>
<p>c. 修改_config.yml文件的theme值如下：</p>
<blockquote>
<p><strong>theme: yilia</strong>(注意参数与值之间空格)</p>
</blockquote>
<p>d. 当主题有更新时，双击Git Shell图标，通过CD命令进入Hexo工作空间/themes/yilia目录后执行如下命令更新主题：</p>
<blockquote>
<p><strong>git pull</strong></p>
</blockquote>
</li>
</ol>
<h2 id="博客文章发布">博客文章发布</h2><ol>
<li><p>创建新文章,双击Git Shell图标，CD命令切换至Hexo工作空间目录后,执行如下命令：</p>
<blockquote>
<p><strong>hexo new ‘新文章标题’</strong>(如文章标题不含空格则引号可省略)</p>
</blockquote>
</li>
<li><p>执行完上述命令会在hexo工作空间/source/_posts目录下生成”新文章标题.md”的文件，此时用记事本等文本编辑器工具打开文件，使用markdown语法编辑文章即可。</p>
</li>
<li><p>编辑完成后保存上述文件，执行部署博客内容至GitHub操作中步骤3各命令后博客文章发布完成。</p>
</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>当初搭建这个静态博客参考了好几篇文章，但是还是碰到了不少问题，想想应该整理一下让后来人少走点弯路，我就是这么伟大，请给我点32个赞（此处应有掌声）。</p>
<h2 id="工欲善其事_必先利其器">工欲善其事 必先利其器</h2><ol>
<li><p>Git客户端(博客]]>
    </summary>
    
      <category term="杂文" scheme="http://jellybins.github.io/categories/%E6%9D%82%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="http://jellybins.github.io/2013/07/13/hello-world/"/>
    <id>http://jellybins.github.io/2013/07/13/hello-world/</id>
    <published>2013-07-13T12:46:25.000Z</published>
    <updated>2015-08-19T00:59:08.828Z</updated>
    <content type="html"><![CDATA[<h2 id="你好_世界！">你好 世界！</h2><p>这个静态博客搭起来好久了，但是还从来没动过，本来准备抽个非常空闲的时间来整理一下，把之前WordPress的博文都转移过来，看来现在比较是时候了。</p>
<h2 id="JellyBins来历">JellyBins来历</h2><p>作为一个码农，第一篇博客的标题当然该是Hello World，就像那个码农转行书法家的笑话一样。之前有用京东云擎部署WordPress搭了个博客，但是没怎么打理。前些天看到新闻说京东云要正式运营关闭试用了，然后对于我等屌丝来说只能另寻其它免费之所，所以也自然而然的选择了真正的WordPress网站，虽然被GFW墙掉了。随之而来的就是站点的名称问题，其实一直想用Jelly，但是无奈已被注册或者名字过短等种种原因只能放弃。后来午休的时候突发奇想，码农应该和Binary（二进制码）有关。然后就想到了JellyBin，还跟谷歌的安卓果冻豆系统JellyBean谐音，瞬间感觉高大上，结果要注册的时候提示是保留名称，纠结了，再后来想到这一生应该跟很多Binary有关，于是就有了现在JellyBins（还可以变作JellyBin’s，简直perfect，请原谅我的放荡不羁爱自由）。之后再搭建这个静态博客的时候也就延续使用了这个名字，所以现在的站点链接是：<a href="http://jellybins.github.io">http://jellybins.github.io</a> 。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="你好_世界！">你好 世界！</h2><p>这个静态博客搭起来好久了，但是还从来没动过，本来准备抽个非常空闲的时间来整理一下，把之前WordPress的博文都转移过来，看来现在比较是时候了。</p>
<h2 id="JellyBins来历">JellyBins来历]]>
    </summary>
    
      <category term="杂文" scheme="http://jellybins.github.io/categories/%E6%9D%82%E6%96%87/"/>
    
  </entry>
  
</feed>