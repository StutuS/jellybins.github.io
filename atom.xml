<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
  <title><![CDATA[JellyBin's博客]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://jellybins.github.io//"/>
  <updated>2015-08-20T02:39:29.052Z</updated>
  <id>http://jellybins.github.io//</id>
  
  <author>
    <name><![CDATA[Jelly Bins]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[SQLServer创建登录用户错误]]></title>
    <link href="http://jellybins.github.io/2014/08/17/SQLServer%E5%88%9B%E5%BB%BA%E7%99%BB%E5%BD%95%E7%94%A8%E6%88%B7%E9%94%99%E8%AF%AF/"/>
    <id>http://jellybins.github.io/2014/08/17/SQLServer创建登录用户错误/</id>
    <published>2014-08-17T09:42:19.000Z</published>
    <updated>2015-08-20T02:39:29.052Z</updated>
    <content type="html"><![CDATA[<h2 id="错误描述">错误描述</h2><p>在Microsoft SQLServer 还原数据库后，要创建登录该数据库的用户结果提示“错误15023:当前数据库中已存在用户或角色”或“用户、组或角色 在当前数据库中已存在”。</p>
<h2 id="原因及解决办法">原因及解决办法</h2><ul>
<li>原因：<br>SQLServer中登录用户名与数据库用户用户名的区别。登录用户名用于用户身份验证，而数据库用户用户名用于数据库访问和权限验证。登录用户通过安全识别符 (SID) 与数据库用户关联。将数据库恢复到其他服务器时，数据库中包含一组用户和权限，但可能没有相应的登录用户或者登录所关联的用户可能不是相同的用户。这种情况被称为存在“孤立用户”。</li>
<li>解决办法：<br>调用系统存储过程sp_change_users_login，具体用法如下：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">use</span> 数据库名</span><br><span class="line"><span class="keyword">go</span></span><br><span class="line">sp_change_users_login <span class="string">'update_one'</span>, <span class="string">'用户名'</span>,<span class="string">'用户名'</span></span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>其中数据库名为存在孤立用户的数据库，update_one是存储过程的参数，表示只处理一个用户，前一个用户名是数据库用户，后一个用户名是用来数据库登录，以上这个SQL命令表示将数据库用户用户名与服务器登录用户名重新连接起来。这样就可以正常使用数据库了。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="错误描述">错误描述</h2><p>在Microsoft SQLServer 还原数据库后，要创建登录该数据库的用户结果提示“错误15023:当前数据库中已存在用户或角色”或“用户、组或角色 在当前数据库中已存在”。</p>
<h2 id="原因及解决办法">原因]]>
    </summary>
    
      <category term="SQLServer" scheme="http://jellybins.github.io/tags/SQLServer/"/>
    
      <category term="创建用户错误" scheme="http://jellybins.github.io/tags/%E5%88%9B%E5%BB%BA%E7%94%A8%E6%88%B7%E9%94%99%E8%AF%AF/"/>
    
      <category term="数据库" scheme="http://jellybins.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[再谈线程synchronized同步]]></title>
    <link href="http://jellybins.github.io/2013/10/20/%E5%86%8D%E8%B0%88%E7%BA%BF%E7%A8%8Bsynchronized%E5%90%8C%E6%AD%A5/"/>
    <id>http://jellybins.github.io/2013/10/20/再谈线程synchronized同步/</id>
    <published>2013-10-20T08:59:20.000Z</published>
    <updated>2015-09-12T01:22:36.069Z</updated>
    <content type="html"><![CDATA[<p><code>synchronized</code>是Java语言的关键字，当它用来修饰一个方法或者一个代码块的时候，能够保证在同一时刻最多只有一个线程执行该段代码。</p>
<h2 id="先摆结论">先摆结论</h2><ol>
<li><p>当两个并发线程访问同一个对象object中的这个synchronized(this)同步代码块时，一个时间内只能有一个线程得到执行。另一个线程必须等待当前线程执行完这个代码块以后才能执行该代码块。</p>
</li>
<li><p>然而，当一个线程访问object的一个synchronized(this)同步代码块时，另一个线程仍然可以访问该object中的非synchronized(this)同步代码块。</p>
</li>
<li><p>尤其关键的是，当一个线程访问object的一个synchronized(this)同步代码块时，其他线程对object中所有其它synchronized(this)同步代码块的访问将被阻塞。</p>
</li>
<li><p>第三个例子同样适用其它同步方法。也就是说，当一个线程访问object的一个synchronized(this)同步代码块时，它就获得了这个object的对象锁。结果，其它线程对该object对象所有同步方法的访问都被暂时阻塞。</p>
</li>
<li><p>以上规则对其它对象锁同样适用。</p>
</li>
</ol>
<a id="more"></a>
<h2 id="再来举例">再来举例</h2><h3 id="代码示例1">代码示例1</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line">public class Thread1 implements Runnable &#123;</span><br><span class="line">	public void run() &#123;</span><br><span class="line">		synchronized (this) &#123;</span><br><span class="line">			for (int i = 0; i &lt; 5; i++) &#123;</span><br><span class="line">				System.out.println(Thread.currentThread().getName()</span><br><span class="line">						+ " synchronized loop " + i);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	public static void main(String[] args) &#123;</span><br><span class="line">		Thread1 t1 = new Thread1();</span><br><span class="line">		Thread ta = new Thread(t1, "A");</span><br><span class="line">		Thread tb = new Thread(t1, "B");</span><br><span class="line">		ta.start();</span><br><span class="line">		tb.start();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<blockquote>
<p>A synchronized loop 0<br>A synchronized loop 1<br>A synchronized loop 2<br>A synchronized loop 3<br>A synchronized loop 4<br>B synchronized loop 0<br>B synchronized loop 1<br>B synchronized loop 2<br>B synchronized loop 3<br>B synchronized loop 4</p>
<p>当两个并发线程访问同一个对象object中的这个synchronized(this)同步代码块时，一个时间内只能有一个线程得到执行。另一个线程必须等待当前线程执行完这个代码块以后才能执行该代码块。</p>
</blockquote>
<h3 id="代码示例2">代码示例2</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Thread2</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m4t1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">			<span class="keyword">int</span> i = <span class="number">5</span>;</span><br><span class="line">			<span class="keyword">while</span> (i-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">				System.out.println(Thread.currentThread().getName() + <span class="string">" : "</span> + i);</span><br><span class="line">				<span class="keyword">try</span> &#123;</span><br><span class="line">					Thread.sleep(<span class="number">500</span>);</span><br><span class="line">				&#125; <span class="keyword">catch</span> (InterruptedException ie) &#123;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m4t2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> i = <span class="number">5</span>;</span><br><span class="line">		<span class="keyword">while</span> (i-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">			System.out.println(Thread.currentThread().getName() + <span class="string">" : "</span> + i);</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				Thread.sleep(<span class="number">500</span>);</span><br><span class="line">			&#125; <span class="keyword">catch</span> (InterruptedException ie) &#123;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">final</span> Thread2 myt2 = <span class="keyword">new</span> Thread2();</span><br><span class="line">		Thread t1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">				myt2.m4t1();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;, <span class="string">"t1"</span>);</span><br><span class="line">		Thread t2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">				myt2.m4t2();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;, <span class="string">"t2"</span>);</span><br><span class="line">		t1.start();</span><br><span class="line">		t2.start();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<blockquote>
<p>t1 : 4<br>t2 : 4<br>t1 : 3<br>t2 : 3<br>t1 : 2<br>t2 : 2<br>t1 : 1<br>t2 : 1<br>t1 : 0<br>t2 : 0</p>
<p>t1线程访问Thread2的一个synchronized(this)同步代码块m4t1时，t2线程仍然可以访问该Thread2中的非synchronized(this)同步代码块m4t2。</p>
</blockquote>
<h3 id="代码示例3">代码示例3</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">//修改代码示例2中Thread2.m4t2()方法：  </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m4t2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">		<span class="keyword">int</span> i = <span class="number">5</span>;</span><br><span class="line">		<span class="keyword">while</span> (i-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">			System.out.println(Thread.currentThread().getName() + <span class="string">" : "</span> + i);</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				Thread.sleep(<span class="number">500</span>);</span><br><span class="line">			&#125; <span class="keyword">catch</span> (InterruptedException ie) &#123;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<blockquote>
<p>t1 : 4<br>t1 : 3<br>t1 : 2<br>t1 : 1<br>t1 : 0<br>t2 : 4<br>t2 : 3<br>t2 : 2<br>t2 : 1<br>t2 : 0</p>
<p>t1线程访问Thread2的一个synchronized(this)同步代码块m4t1时，t2线程对Thread2中所有其它synchronized(this)同步代码块m4t2的访问被阻塞。</p>
</blockquote>
<h3 id="代码示例4">代码示例4</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">//修改Thread2.m4t2()方法如下：</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">m4t2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">5</span>;</span><br><span class="line">	<span class="keyword">while</span> (i-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">		System.out.println(Thread.currentThread().getName() + <span class="string">" : "</span> + i);</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			Thread.sleep(<span class="number">500</span>);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (InterruptedException ie) &#123;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<blockquote>
<p>t1 : 4<br>t1 : 3<br>t1 : 2<br>t1 : 1<br>t1 : 0<br>t2 : 4<br>t2 : 3<br>t2 : 2<br>t2 : 1<br>t2 : 0</p>
<p>t1线程访问Thread2的一个synchronized(this)同步代码块m4t1时，它就获得了这个Thread2的对象锁。结果，t2线程对该Thread2对象所有同步方法的访问都被暂时阻塞,即3的规则对同步方法也适用。</p>
</blockquote>
<h3 id="代码示例5">代码示例5</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Thread3</span> </span>&#123;</span><br><span class="line">	<span class="class"><span class="keyword">class</span> <span class="title">Inner</span> </span>&#123;</span><br><span class="line">		<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">m4t1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			<span class="keyword">int</span> i = <span class="number">5</span>;</span><br><span class="line">			<span class="keyword">while</span> (i-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">				System.out.println(Thread.currentThread().getName()</span><br><span class="line">						+ <span class="string">" : Inner.m4t1()="</span> + i);</span><br><span class="line">				<span class="keyword">try</span> &#123;</span><br><span class="line">					Thread.sleep(<span class="number">500</span>);</span><br><span class="line">				&#125; <span class="keyword">catch</span> (InterruptedException ie) &#123;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">m4t2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			<span class="keyword">int</span> i = <span class="number">5</span>;</span><br><span class="line">			<span class="keyword">while</span> (i-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">				System.out.println(Thread.currentThread().getName()</span><br><span class="line">						+ <span class="string">" : Inner.m4t2()="</span> + i);</span><br><span class="line">				<span class="keyword">try</span> &#123;</span><br><span class="line">					Thread.sleep(<span class="number">500</span>);</span><br><span class="line">				&#125; <span class="keyword">catch</span> (InterruptedException ie) &#123;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">m4t1</span><span class="params">(Inner inner)</span> </span>&#123; </span><br><span class="line">          <span class="keyword">synchronized</span>(inner) &#123; <span class="comment">//使用对象锁 </span></span><br><span class="line">        	  inner.m4t1(); </span><br><span class="line">          &#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">m4t2</span><span class="params">(Inner inner)</span> </span>&#123;</span><br><span class="line">        inner.m4t2();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">final</span> Thread3 myt3 = <span class="keyword">new</span> Thread3();</span><br><span class="line">		<span class="keyword">final</span> Inner inner = myt3.new Inner();</span><br><span class="line">		Thread t1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">				myt3.m4t1(inner);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;, <span class="string">"t1"</span>);</span><br><span class="line">		Thread t2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">				myt3.m4t2(inner);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;, <span class="string">"t2"</span>);</span><br><span class="line">		t1.start();</span><br><span class="line">		t2.start();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<blockquote>
<p>t1 : Inner.m4t1()=4<br>t2 : Inner.m4t2()=4<br>t1 : Inner.m4t1()=3<br>t2 : Inner.m4t2()=3<br>t1 : Inner.m4t1()=2<br>t2 : Inner.m4t2()=2<br>t1 : Inner.m4t1()=1<br>t2 : Inner.m4t2()=1<br>t1 : Inner.m4t1()=0<br>t2 : Inner.m4t2()=0</p>
<p>尽管线程t1获得了对Inner的对象锁，但由于线程t2访问的是同一个Inner中的非同步部分。所以两个线程互不干扰。</p>
</blockquote>
<p>现在在Inner.m4t2()前面加上synchronized：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">m4t2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">5</span>;</span><br><span class="line">	<span class="keyword">while</span> (i-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">		System.out.println(Thread.currentThread().getName()</span><br><span class="line">				+ <span class="string">" : Inner.m4t2()="</span> + i);</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			Thread.sleep(<span class="number">500</span>);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (InterruptedException ie) &#123;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<blockquote>
<p>t1 : Inner.m4t1()=4<br>t1 : Inner.m4t1()=3<br>t1 : Inner.m4t1()=2<br>t1 : Inner.m4t1()=1<br>t1 : Inner.m4t1()=0<br>t2 : Inner.m4t2()=4<br>t2 : Inner.m4t2()=3<br>t2 : Inner.m4t2()=2<br>t2 : Inner.m4t2()=1<br>t2 : Inner.m4t2()=0</p>
<p>尽管线程t1与t2访问了同一个Inner对象中两个毫不相关的部分,但因为t1先获得了对Inner的对象锁，所以t2对Inner.m4t2()的访问也被阻塞，因为m4t2()是Inner中的一个同步方法。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><code>synchronized</code>是Java语言的关键字，当它用来修饰一个方法或者一个代码块的时候，能够保证在同一时刻最多只有一个线程执行该段代码。</p>
<h2 id="先摆结论">先摆结论</h2><ol>
<li><p>当两个并发线程访问同一个对象object中的这个synchronized(this)同步代码块时，一个时间内只能有一个线程得到执行。另一个线程必须等待当前线程执行完这个代码块以后才能执行该代码块。</p>
</li>
<li><p>然而，当一个线程访问object的一个synchronized(this)同步代码块时，另一个线程仍然可以访问该object中的非synchronized(this)同步代码块。</p>
</li>
<li><p>尤其关键的是，当一个线程访问object的一个synchronized(this)同步代码块时，其他线程对object中所有其它synchronized(this)同步代码块的访问将被阻塞。</p>
</li>
<li><p>第三个例子同样适用其它同步方法。也就是说，当一个线程访问object的一个synchronized(this)同步代码块时，它就获得了这个object的对象锁。结果，其它线程对该object对象所有同步方法的访问都被暂时阻塞。</p>
</li>
<li><p>以上规则对其它对象锁同样适用。</p>
</li>
</ol>]]>
    
    </summary>
    
      <category term="线程" scheme="http://jellybins.github.io/tags/%E7%BA%BF%E7%A8%8B/"/>
    
      <category term="线程同步" scheme="http://jellybins.github.io/tags/%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5/"/>
    
      <category term="Java" scheme="http://jellybins.github.io/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[线程的结束，挂起和恢复]]></title>
    <link href="http://jellybins.github.io/2013/10/11/%E7%BA%BF%E7%A8%8B%E7%9A%84%E7%BB%93%E6%9D%9F%EF%BC%8C%E6%8C%82%E8%B5%B7%E5%92%8C%E6%81%A2%E5%A4%8D/"/>
    <id>http://jellybins.github.io/2013/10/11/线程的结束，挂起和恢复/</id>
    <published>2013-10-11T06:26:22.000Z</published>
    <updated>2015-09-12T01:19:05.851Z</updated>
    <content type="html"><![CDATA[<h2 id="引言">引言</h2><p>Android的车辆监控端应用开发中，碰到了轨迹回放控制，播放、暂停、停止不知道该怎么实现的问题，虽然知道要用线程。然后找到了这篇文章，讲解的非常清晰，在此记录之，文末有原文链接。最后将整个轨迹回放实现完成后，再看代码恍然大悟，这不就是音乐播放器的播放、暂停、停止的实现，当初看播放器源码应该很容易就解决了，结果重复造了轮子，不过还是很有收获的。</p>
<p>PS：程序示例部分是我在原作者的基础上修改而来，感觉应该更通俗易懂些，希望能对需要的人有帮助，有什么错误的话还请指正，谢谢。</p>
<a id="more"></a>
<h2 id="Android中的线程操作">Android中的线程操作</h2><p>在Android应用的开发过程中,我们有时候需要通过创建一个新的线程去完成一些任务。例如，我们去进行搜寻动作，如果搜寻比较费时，我们就需要通过进度条来提示用户搜寻的进展情况，避免用户认为发生了死机。此时进度条的刷新就需要另外一个线程去实现。</p>
<p>但是这里有一个误区:有些人在多线程开发的时候会错误的认为，如果我们从创建线程的Activity中退出（该Acitivity被销毁），则在该Activity中创建的自定义线程也会被销毁。其实这是大错特错了。</p>
<p>实践证明，上述情况下，创建的线程并不会自动销毁，而是仍然在后台默默无闻地执行，直到自行结束。Android的这种设计是无可厚非的。从理论上来解释，应用的最小执行单位是线程，最小资源单位是进程，一个进程可以包含多个线程，而多个线程共享同一个所属进程的资源。因此，个人理解Android的应用其实就是一个进程，而里面的每个UI,Activity就是从属这个进程的线程，从一个Activity进入另外一个Activity本质就是将之前的线程挂起，然后创建后面的线程。退出也是同理。自定义线程也是遵循这个原则的。除非去控制某个线程结束，否则只有当该现程执行完毕或者所属的进程被销毁，该线程才会真正的结束。</p>
<p>综上，当我们在自定义线程还没有执行完毕的情况下，需要结束相关动作的时候，我们就要认为地去结束相关线程。例如，在搜寻过程中，我们不想去继续搜寻，而退出了搜寻功能，此时我们就需要去结束自定义的搜寻线程。如果不这样会可能造成严重错误。例如，我们反复进入搜寻功能去搜寻，在搜寻未结束时退出，然后再进入。这种情况下，由于之前的自定义线程并未结束，而之后又会有多个新搜寻线程被创建执行，很容易导致临界区冲突，从而导致设备当机。</p>
<p>那么我们如何控制这些自定义线程呢？</p>
<h2 id="线程的结束">线程的结束</h2><p>其实，通过帮助文档，我们可以知道，Android的线程类本身就提供了一些公共方法去结束线程。</p>
<blockquote>
<p><strong>void destroy()</strong></p>
<p>This method is deprecated. Not implemented. </p>
<p><strong>synchronized final void stop(Throwablethrowable)</strong></p>
<p>This method is deprecated. because stopping a thread in this manner is unsafe and can leave your application and the VM in an unpredictable state. </p>
<p><strong>final void stop()</strong></p>
<p>This method is deprecated. because stopping a thread in this manner is unsafe and can leave your application andthe VM in an unpredictable state. </p>
</blockquote>
<p>但是，通过说明我们可以看到，这些方法Android本身都是不推荐使用的，通过这种方式结束线程是不安全的，可能会让我们的应用退出，并且会让虚拟机处于一种无法预料的状态。那么开发过程中，在合情合理的需求中，我们怎么去安全的结束指定的自定义线程呢？</p>
<h3 id="解决方法">解决方法</h3><ol>
<li><p>我们可以在自定义线程类中定义一个布尔私有变量，并且初始化为假，用于记录线程的执行状态。</p>
</li>
<li><p>在run函数开始，设置该变量为真，表示线程进入执行状态。</p>
</li>
<li><p>在run函数结束位置，设置该变量为假，表示线程进入结束状态。</p>
</li>
<li><p>在run的线程执行部分，我们可以找一些锲点，对该变量进行判断，如果为真则继续执行，否则退出run函数。</p>
</li>
<li><p>在自定义线程类中再提供一个公共函数，该函数的作用是将上述状态变量设置为假。</p>
</li>
</ol>
<blockquote>
<p>这样，当自定义线程执行还未结束时，我们就可以通过调用5中的方法将线程安全结束。思想的本质就是，既然我们不能安全强制结束线程，那我们就让它安全地提前退出。效果是一样的。</p>
</blockquote>
<h3 id="程序实例:">程序实例:</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SearchThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">boolean</span> isRun = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">SearchThread</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		isRun = <span class="keyword">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStopState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		isRun = <span class="keyword">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="annotation">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//改变为运行状态</span></span><br><span class="line">		isRun = <span class="keyword">true</span>;</span><br><span class="line">        <span class="comment">//开始运行</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">		    <span class="comment">//每次运行检查运行标志位</span></span><br><span class="line">			<span class="keyword">if</span> (!isRun) &#123;</span><br><span class="line">				<span class="keyword">return</span>;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="comment">// <span class="doctag"><span class="keyword">TODO</span></span> Something</span></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="线程的挂起与恢复">线程的挂起与恢复</h2><p>同样，Android线程类也提供了一些公共方法去挂起和恢复线程:</p>
<blockquote>
<p><strong>final void resume()</strong></p>
<p>This method is deprecated. Used with deprecated method suspend.</p>
<p><strong>final void suspend()</strong></p>
<p>This method is deprecated. May cause deadlocks.</p>
</blockquote>
<p>同样不幸的是，通过说明我们可以看到，这些方法Android也是不推荐使用的，经过笔者试验，这些方法也没有效果。那我们如何去挂起和恢复线程呢？</p>
<p>Android的类基本都是继承于Object类。此类可以说是Android类的祖先了。如果把Android类比喻为一个生物界，则Object类就是当初生命诞生时候的那个单细胞。</p>
<p>我们可以发现Object类提供了几个方法：</p>
<blockquote>
<p><strong>final void notify()</strong></p>
<p>Causes a thread which is waiting on this object’smonitor (by means of calling one of the wait() methods) to be woken.</p>
<p><strong>final void notifyAll()</strong></p>
<p>Causes all threads which are waiting on thisobject’s monitor (by means of calling one of the wait() methods) to be woken.</p>
<p><strong>final void wait()</strong></p>
<p>Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object.</p>
</blockquote>
<p>通过说明我们可以知道，wait方法可以让正在调用的线程处于等待状态，直到其他线程调用了该对象的notify或者notifyAll，而notify和notifyAll方法则是用于唤醒处于等待中的线程。</p>
<p>同样，线程类也是继承于Object类，但是线程类是一个比较特殊的类，有自己独立的栈机制来处理其方法，参数和局部变量。通过实验发现，虽然线程类继承于Object类，但是却不能通过wait和notify方法挂起唤醒线程。而要实现上述动作，必须去间接地实现，即在自定义线程类中创建一个Object对象，然后通过对该Object的相关操作实现线程的挂起和唤醒。</p>
<h3 id="解决方法：">解决方法：</h3><ol>
<li><p>在自定义线程类的实例化过程中创建一个Object对象。</p>
</li>
<li><p>定义一个变量来记录线程的状态是否挂起，初始化为假。</p>
</li>
<li><p>在线程类中的run函数中的线程执行部分找入锲点来执行下面动作：如果当前状态变量为假（表示线程挂起），则通过1中Object对象的wait方法挂起当前线程，即线程暂停在锲点位置，如果被唤起，则将从锲点后继续执行。</p>
</li>
<li><p>定义一个方法来修改线程状态变量为真，从而达到挂起线程的目的。</p>
</li>
<li><p>定义一个方法去唤醒线程。判断如果线程状态变量为真，则修改其为假，然后调用1中Object对象的notifyAll方法唤醒对象。（notify方法也可以，但是如果自定义线程较多时容易造成死锁）。</p>
</li>
</ol>
<blockquote>
<p>综上，当自定义线程运行后我们可以通过4中的方法挂起线程，通过5中的方法唤醒线程。</p>
</blockquote>
<h3 id="程序实例:-1">程序实例:</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SearchThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> Object mPauseLock;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">boolean</span> mPauseFlag;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">SearchThread</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		mPauseLock = <span class="keyword">new</span> Object();</span><br><span class="line">		mPauseFlag = <span class="keyword">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pauseThread</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">synchronized</span> (mPauseLock) &#123;</span><br><span class="line">			mPauseFlag = <span class="keyword">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">resumeThread</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">synchronized</span> (mPauseLock) &#123;</span><br><span class="line">			mPauseFlag = <span class="keyword">false</span>;</span><br><span class="line">			mPauseLock.notifyAll();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="annotation">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">//线程开始执行</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">			<span class="comment">//每次执行检测是否应改变为暂停状态</span></span><br><span class="line">			<span class="keyword">synchronized</span> (mPauseLock) &#123;</span><br><span class="line">				<span class="keyword">if</span> (mPauseFlag) &#123;</span><br><span class="line">					<span class="keyword">try</span> &#123;</span><br><span class="line">						mPauseLock.wait();</span><br><span class="line">					&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">						e.printStackTrace();</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">			<span class="comment">// <span class="doctag"><span class="keyword">TODO</span></span> Something</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Ps：<a href="http://blog.sina.com.cn/s/blog_4c0706560101175j.html" target="_blank" rel="external">原文链接</a>在此。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="引言">引言</h2><p>Android的车辆监控端应用开发中，碰到了轨迹回放控制，播放、暂停、停止不知道该怎么实现的问题，虽然知道要用线程。然后找到了这篇文章，讲解的非常清晰，在此记录之，文末有原文链接。最后将整个轨迹回放实现完成后，再看代码恍然大悟，这不就是音乐播放器的播放、暂停、停止的实现，当初看播放器源码应该很容易就解决了，结果重复造了轮子，不过还是很有收获的。</p>
<p>PS：程序示例部分是我在原作者的基础上修改而来，感觉应该更通俗易懂些，希望能对需要的人有帮助，有什么错误的话还请指正，谢谢。</p>]]>
    
    </summary>
    
      <category term="线程" scheme="http://jellybins.github.io/tags/%E7%BA%BF%E7%A8%8B/"/>
    
      <category term="线程操作" scheme="http://jellybins.github.io/tags/%E7%BA%BF%E7%A8%8B%E6%93%8D%E4%BD%9C/"/>
    
      <category term="Android" scheme="http://jellybins.github.io/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Java参数传递-值传递or引用传递？]]></title>
    <link href="http://jellybins.github.io/2013/09/25/Java%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92-%E5%80%BC%E4%BC%A0%E9%80%92or%E5%BC%95%E7%94%A8%E4%BC%A0%E9%80%92%EF%BC%9F/"/>
    <id>http://jellybins.github.io/2013/09/25/Java参数传递-值传递or引用传递？/</id>
    <published>2013-09-25T13:26:01.000Z</published>
    <updated>2015-08-21T13:29:19.955Z</updated>
    <content type="html"><![CDATA[<h2 id="简单类型是按值传递的">简单类型是按值传递的</h2><p>Java 方法的参数是简单类型的时候，是按值传递的 (pass by value)。这一点我们可以通过一个简单的例子来说明：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 例 1 * Test.java */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">boolean</span> test)</span> </span>&#123;</span><br><span class="line">		test = !test;</span><br><span class="line">		System.out.println(<span class="string">"In test(boolean) : test = "</span> + test);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">boolean</span> test = <span class="keyword">true</span>;</span><br><span class="line">		System.out.println(<span class="string">"Before test(boolean) : test = "</span> + test);</span><br><span class="line">		test(test);</span><br><span class="line">		System.out.println(<span class="string">"After test(boolean) : test = "</span> + test);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<blockquote>
<p>Before test(boolean) : test = true<br>In test(boolean) : test = false<br>After test(boolean) : test = true</p>
</blockquote>
<p>不难看出，虽然在 <code>test(boolean)</code> 方法中改变了传进来的参数的值，但对这个参数源变量本身并没有影响，即对 <code>main(String[])</code> 方法里的 test 变量没有影响。那说明，参数类型是简单类型的时候，是按值传递的。以参数形式传递简单类型的变量时，实际上是将参数的值作了一个拷贝传进方法函数的，那么在方法函数里再怎么改变其值，其结果都是只改变了拷贝的值，而不是源值。</p>
<a id="more"></a>
<h2 id="什么是引用">什么是引用</h2><p>Java 是传值还是传引用，问题主要出在对象的传递上，因为 Java 中简单类型没有引用。既然争论中提到了引用这个东西，为了搞清楚这个问题，我们必须要知道引用是什么。<br>　　<br>简单的说，引用其实就像是一个对象的名字或者别名 (alias)，一个对象在内存中会请求一块空间来保存数据，根据对象的大小，它可能需要占用的空间大小也不等。访问对象的时候，我们不会直接是访问对象在内存中的数据，而是通过引用去访问。引用也是一种数据类型，我们可以把它想象为类似C语言中指针的东西，它指示了对象在内存中的地址——只不过我们不能够观察到这个地址究竟是什么。<br>　　<br>如果我们定义了不止一个引用指向同一个对象，那么这些引用是不相同的，因为引用也是一种数据类型，需要一定的内存空间来保存。但是它们的值是相同的，都指示同一个对象在内存的中位置。比如<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String a = <span class="string">"Hello"</span>;</span><br><span class="line">String b = a;</span><br></pre></td></tr></table></figure></p>
<p>这里 a 和 b 是不同的两个引用，我们使用了两个定义语句来定义它们。但它们的值是一样的，都指向同一个对象 “Hello”。也许你还觉得不够直观，因为 String 对象的值本身是不可更改的 (像 b = “World”; b = a; 这种情况不是改变了 “World” 这一对象的值，而是改变了它的引用 b 的值使之指向了另一个 String 对象 a)。那么我们用 StringBuffer 来举一个例子：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 例 2 * Test.java */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		StringBuffer a = <span class="keyword">new</span> StringBuffer(<span class="string">"Hello"</span>);</span><br><span class="line">		StringBuffer b = a;</span><br><span class="line">		b.append(<span class="string">", World"</span>);</span><br><span class="line">		System.out.println(<span class="string">"a is "</span> + a);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<blockquote>
<p>a is Hello, World</p>
</blockquote>
<p>这个例子中 a 和 b 都是引用，当改变了 b 指示的对象的值的时候，从输出结果来看，a 所指示的对象的值也改变了。所以 a 和 b 都指向同一个对象即包含 “Hello” 的一个 StringBuffer 对象。</p>
<p>这里我描述了两个要点：引用是一种数据类型，保存了对象在内存中的地址，这种类型即不是我们平时所说的简单数据类型也不是类实例(对象)；不同的引用可能指向同一个对象，换句话说，一个对象可以有多个引用，即该类类型的变量。
　　</p>
<h2 id="对象是如何传递的呢">对象是如何传递的呢</h2><p>关于对象的传递，有两种说法，即“它是按值传递的”和“它是按引用传递的”。这两种说法各有各的道理，但是它们都没有从本质上去分析，即致于产生了争论。既然现在我们已经知道了引用是什么东西，那么现在不妨来分析一下对象作是参数是如何传递的。还是先以一个程序为例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 例 3 * Test.java */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(StringBuffer str)</span> </span>&#123;</span><br><span class="line">		str.append(<span class="string">", World!"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		StringBuffer string = <span class="keyword">new</span> StringBuffer(<span class="string">"Hello"</span>);</span><br><span class="line">		test(string);</span><br><span class="line">		System.out.println(string);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>运行结果：</p>
<blockquote>
<p>Hello, World!</p>
</blockquote>
<p>test(string) 调用了 test(StringBuffer) 方法，并将 string 作为参数传递了进去。这里 string 是一个引用，这一点是勿庸置疑的。前面提到，引用是一种数据类型，而且不是对象，所以它不可能按引用传递，所以它是按值传递的，它么它的值究竟是什么呢？ 是对象的地址。</p>
<p>由此可见，对象作为参数的时候是按值传递的，对吗？错！为什么错，让我们看另一个例子：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 例 4 * Test.java */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">		str = <span class="string">"World"</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		String string = <span class="string">"Hello"</span>;</span><br><span class="line">		test(string);</span><br><span class="line">		System.out.println(string);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>运行结果：</p>
<blockquote>
<p>Hello</p>
</blockquote>
<p>为什么会这样呢？因为参数 str是一个引用，而且它与string是不同的引用，虽然它们都是同一个对象的引用。str = “World” 则改变了 str 的值，使之指向了另一个对象，然而 str 指向的对象改变了，但它并没有对 “Hello” 造成任何影响，而且由于string和str是不同的引用，str的改变也没有对string造成任何影响，结果就如例中所示。</p>
<p>其结果是推翻了参数按值传递的说法。那么，对象作为参数的时候是按引用传递的了？也错！因为上一个例子的确能够说明它是按值传递的。结果，就像光到底是波还是粒子的问题一样，Java方法的参数是按什么传递的问题，其答案就只能是：即是按值传递也是按引用传递，只是参照物不同，结果也就不同。</p>
<h2 id="正确看待传值还是传引用的问题">正确看待传值还是传引用的问题</h2><p>要正确的看待这个问题必须要搞清楚为什么会有这样一个问题。</p>
<p>实际上，问题来源于 C，而不是 Java。C 语言中有一种数据类型叫做指针，于是将一个数据作为参数传递给某个函数的时候，就有两种方式：传值，或是传指针，它们的区别，可以用一个简单的例子说明：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 例 5 * test.c */</span> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SwapValue</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; </span><br><span class="line">	<span class="keyword">int</span> t = a; a = b; b = t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SwapPointer</span><span class="params">(<span class="keyword">int</span> * a, <span class="keyword">int</span> * b)</span> </span>&#123; </span><br><span class="line">	<span class="keyword">int</span> t = * a; * a = * b; * b = t; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123; </span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">0</span>, b = <span class="number">1</span>; </span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"1 : a = %d, b = %d\n"</span>, a, b);</span><br><span class="line">	SwapValue(a, b); </span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"2 : a = %d, b = %d\n"</span>, a, b);</span><br><span class="line">	SwapPointer(&amp;a, &amp;b);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"3 : a = %d, b = %d\n"</span>, a, b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>运行结果：</p>
<blockquote>
<p>1 : a = 0, b = 1<br>2 : a = 0, b = 1<br>3 : a = 1, b = 0</p>
</blockquote>
<p>大家可以明显的看到，按指针传递参数可以方便的修改通过参数传递进来的值，而按值传递就不行。</p>
<p>当 Java 成长起来的时候，许多的 C 程序员开始转向学习 Java，他们发现，使用类似 SwapValue 的方法仍然不能改变通过参数传递进来的简单数据类型的值，但是如果是一个对象，则可能将其成员随意更改。于是他们觉得这很像是 C 语言中传值/传指针的问题。但是 Java 中没有指针，那么这个问题就演变成了传值/传引用的问题。可惜将这个问题放在 Java 中进行讨论并不恰当。<br>　　<br>讨论这样一个问题的最终目的只是为了搞清楚何种情况才能在方法函数中方便的更改参数的值并使之长期有效。</p>
<p>Java 中，改变参数的值有两种情况，第一种，使用赋值号“=”直接进行赋值使其改变，如例 1 和例 4；第二种，对于某些对象的引用，通过一定途径对其成员数据进行改变，如例 3。对于第一种情况，其改变不会影响到方法该方法以外的数据，或者直接说源数据。而第二种方法，则相反，会影响到源数据——因为引用指示的对象没有变，对 其成员数据进行改变则实质上是改变的该对象。
　　</p>
<h2 id="如何实现类似_swap_的方法">如何实现类似 swap 的方法</h2><p>　　<br>传值还是传引用的问题，到此已经算是解决了，但是我们仍然不能解决这样一个问题：如果我有两个 int 型的变量 a 和 b，我想写一个方法来交换它们的值，应该怎么办？</p>
<p>结论很让人失望——没有办法！因此，我们只能具体情况具体讨论，以经常使用交换方法的排序为例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 例 6 * Test.java */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] data, <span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> t = data[a];</span><br><span class="line">		data[a] = data[b];</span><br><span class="line">		data[b] = t;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span>[] data = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">			data[i] = (<span class="keyword">int</span>) (Math.random() * <span class="number">100</span>);</span><br><span class="line">			System.out.print(<span class="string">" "</span> + data[i]);</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println();</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; <span class="number">10</span>; j++) &#123;</span><br><span class="line">				<span class="keyword">if</span> (data[i] &gt; data[j]) &#123;</span><br><span class="line">					swap(data, i, j);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">			System.out.print(<span class="string">" "</span> + data[i]);</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>运行结果(情况之一)：</p>
<blockquote>
<p>78 69 94 38 95 31 50 97 84 1<br>1 31 38 50 69 78 84 94 95 97</p>
</blockquote>
<p><code>swap(int[] data, int a, int b)</code> 方法在内部实际上是改变了 data 所指示的对象的成员数据，即上述讨论的第二种改变参数值的方法。希望大家能够举一反三，使用类似的方法来解决相关问题。</p>
<h2 id="总结">总结</h2><p>一般人都会认同Java中只有值传递，是在讲如果传递的是对象的引用，其实传到参数中的也只是这个引用的一个副本，而不是真正的引用本身，并且把引用看是一种数据类型的话，传递的其实只是引用这种数据的一个副本值。而大多人数人常讲的基本数据类型是值传递，复合数据类型是引用传递，其实更严谨的说法本人感觉应该是“基本数据类型是值传递，复合数据类型是按引用传递”~传递的确实是引用，但是却不是引用的本身，而只是引用的一个副本，这两个引用都指向同一个对象，任何一个修改对象都会引起另一个跟着改变，但是如果更改副本引用的指向，却不会改变原引用的指向，这就是等号赋值和通过方法改变引用所指向的对象的区别（有点玩文字游戏的感觉）。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="简单类型是按值传递的">简单类型是按值传递的</h2><p>Java 方法的参数是简单类型的时候，是按值传递的 (pass by value)。这一点我们可以通过一个简单的例子来说明：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 例 1 * Test.java */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">boolean</span> test)</span> </span>&#123;</span><br><span class="line">		test = !test;</span><br><span class="line">		System.out.println(<span class="string">"In test(boolean) : test = "</span> + test);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">boolean</span> test = <span class="keyword">true</span>;</span><br><span class="line">		System.out.println(<span class="string">"Before test(boolean) : test = "</span> + test);</span><br><span class="line">		test(test);</span><br><span class="line">		System.out.println(<span class="string">"After test(boolean) : test = "</span> + test);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<blockquote>
<p>Before test(boolean) : test = true<br>In test(boolean) : test = false<br>After test(boolean) : test = true</p>
</blockquote>
<p>不难看出，虽然在 <code>test(boolean)</code> 方法中改变了传进来的参数的值，但对这个参数源变量本身并没有影响，即对 <code>main(String[])</code> 方法里的 test 变量没有影响。那说明，参数类型是简单类型的时候，是按值传递的。以参数形式传递简单类型的变量时，实际上是将参数的值作了一个拷贝传进方法函数的，那么在方法函数里再怎么改变其值，其结果都是只改变了拷贝的值，而不是源值。</p>]]>
    
    </summary>
    
      <category term="值传递" scheme="http://jellybins.github.io/tags/%E5%80%BC%E4%BC%A0%E9%80%92/"/>
    
      <category term="参数传递" scheme="http://jellybins.github.io/tags/%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92/"/>
    
      <category term="引用传递" scheme="http://jellybins.github.io/tags/%E5%BC%95%E7%94%A8%E4%BC%A0%E9%80%92/"/>
    
      <category term="Java" scheme="http://jellybins.github.io/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[原码，反码，补码详解（转）]]></title>
    <link href="http://jellybins.github.io/2013/09/21/%E5%8E%9F%E7%A0%81%EF%BC%8C%E5%8F%8D%E7%A0%81%EF%BC%8C%E8%A1%A5%E7%A0%81%E8%AF%A6%E8%A7%A3%EF%BC%88%E8%BD%AC%EF%BC%89/"/>
    <id>http://jellybins.github.io/2013/09/21/原码，反码，补码详解（转）/</id>
    <published>2013-09-21T08:34:59.000Z</published>
    <updated>2015-08-20T02:42:50.825Z</updated>
    <content type="html"><![CDATA[<p>说起要转载的这篇文章还有个故事，开发工作中涉及通讯协议的部分，一直在用Windows系统自带的计算器（程序员模式）计算各种标志位掩码的真实值，偶然的机会同事问我有个二进制值为什么转换出来是负数而不是想要的值，而我转换的过程从来没有发现这个问题，结果不同之处就是在字长的选择上，同样的二进制10000000，当选择字节后转换为十进制时，结果是-128，而在其它字长（如字，双字，四字）的情况下就是128，然后就惊奇的发现了一个错了好多年的认知 ——“Windows计算器里的二进制表示是原码显示”（补码显示才对），然后就想起了大学时好多课程里提到的原反补码，于是也就找到了这篇简明扼要的介绍原反补码的文章。<br><a id="more"></a></p>
<h2 id="一-_机器数和真值">一. 机器数和真值</h2><p>在学习原码, 反码和补码之前， 需要先了解机器数和真值的概念。</p>
<ol>
<li><p>机器数</p>
<p>一个数在计算机中的二进制表示形式， 叫做这个数的机器数。机器数是带符号的，在计算机用一个数的最高位存放符号，正数为0，负数为1。</p>
<p>比如，十进制中的数 +3 ，计算机字长为8位，转换成二进制就是00000011。如果是 -3 ，就是 10000011。</p>
<p>那么，这里的 00000011 和 10000011 就是机器数。</p>
</li>
<li><p>真值</p>
<blockquote>
<p>因为第一位是符号位，所以机器数的形式值就不等于真正的数值。例如上面的有符号数 10000011，其最高位1代表负，其真正数值是 -3 而不是形式值131（10000011转换成十进制等于131）。所以，为区别起见，将带符号位的机器数对应的真正数值称为机器数的真值。</p>
</blockquote>
<p>例：0000 0001的真值 = +000 0001 = +1，1000 0001的真值 = –000 0001 = –1</p>
</li>
</ol>
<h2 id="二-_原码，反码，补码的基础概念和计算方法">二. 原码，反码，补码的基础概念和计算方法</h2><p>在探求为何机器要使用补码之前, 让我们先了解原码, 反码和补码的概念.对于一个数, 计算机要使用一定的编码方式进行存储. 原码, 反码, 补码是机器存储一个具体数字的编码方式.</p>
<ol>
<li><p>原码</p>
<p> 原码就是符号位加上真值的绝对值，即用第一位表示符号，其余位表示值。比如如果是8位二进制:</p>
<blockquote>
<p>[+1]<sub>原</sub> = 0000 0001</p>
<p>[-1]<sub>原</sub>  = 1000 0001</p>
</blockquote>
<p> 第一位是符号位。因为第一位是符号位，所以8位二进制数的取值范围就是：</p>
<p> [1111 1111 , 0111 1111] 即 [-127 , 127]</p>
<p> 原码是人脑最容易理解和计算的表示方式。</p>
</li>
<li><p>反码</p>
<p> 反码的表示方法是:</p>
<ul>
<li><p>正数的反码是其本身</p>
</li>
<li><p>负数的反码是在其原码的基础上，符号位不变，其余各个位取反。</p>
<blockquote>
<p>[+1] = [00000001]<sub>原</sub> = [00000001]<sub>反</sub></p>
<p>[-1] = [10000001]<sub>原</sub> = [11111110]<sub>反</sub></p>
</blockquote>
<p>可见如果一个反码表示的是负数，人脑无法直观的看出来它的数值。 通常要将其转换成原码再计算。</p>
</li>
</ul>
</li>
<li><p>补码</p>
<p> 补码的表示方法是:</p>
<ul>
<li><p>正数的补码就是其本身</p>
</li>
<li><p>负数的补码是在其原码的基础上, 符号位不变, 其余各位取反, 最后+1. (即在反码的基础上+1)</p>
<blockquote>
<p>[+1] = [00000001]<sub>原</sub> = [00000001]<sub>反</sub> = [00000001]<sub>补</sub></p>
<p>[-1] = [10000001]<sub>原</sub> = [11111110]<sub>反</sub> = [11111111]<sub>补</sub></p>
</blockquote>
<p>对于负数, 补码表示方式也是人脑无法直观看出其数值的. 通常也需要转换成原码在计算其数值.</p>
</li>
</ul>
</li>
</ol>
<h2 id="三-_为何要使用原码，反码和补码">三. 为何要使用原码，反码和补码</h2><p>在开始深入学习前, 我的学习建议是先”死记硬背”上面的原码, 反码和补码的表示方式以及计算方法.</p>
<p>现在我们知道了计算机可以有三种编码方式表示一个数. 对于正数因为三种编码方式的结果都相同:</p>
<blockquote>
<p>[+1] = [00000001]<sub>原</sub> = [00000001]<sub>反</sub> = [00000001]<sub>补</sub></p>
</blockquote>
<p>所以不需要过多解释. 但是对于负数:</p>
<blockquote>
<p>[-1] = [10000001]<sub>原</sub> = [11111110]<sub>反</sub> = [11111111]<sub>补</sub></p>
</blockquote>
<p>可见原码, 反码和补码是完全不同的. 既然原码才是被人脑直接识别并用于计算表示方式, 为何还会有反码和补码呢?</p>
<p>首先, 因为人脑可以知道第一位是符号位, 在计算的时候我们会根据符号位, 选择对真值区域的加减. (真值的概念在本文最开头). 但是对于计算机, 加减乘数已经是最基础的运算, 要设计的尽量简单. 计算机辨别”符号位”显然会让计算机的基础电路设计变得十分复杂! 于是人们想出了将符号位也参与运算的方法. 我们知道, 根据运算法则减去一个正数等于加上一个负数, 即: 1-1 = 1 + (-1) = 0 , 所以机器可以只有加法而没有减法, 这样计算机运算的设计就更简单了.</p>
<p>于是人们开始探索 将符号位参与运算, 并且只保留加法的方法. 首先来看原码:</p>
<p>计算十进制的表达式: 1-1=0</p>
<blockquote>
<p>1 - 1 = 1 + (-1) = [00000001]<sub>原</sub> + [10000001]<sub>原</sub> = [10000010]<sub>原</sub> = -2</p>
</blockquote>
<p>如果用原码表示, 让符号位也参与计算, 显然对于减法来说, 结果是不正确的.这也就是为何计算机内部不使用原码表示一个数.</p>
<p>为了解决原码做减法的问题, 出现了反码:</p>
<p>计算十进制的表达式: 1-1=0</p>
<blockquote>
<p>1 - 1 = 1 + (-1) = [0000 0001]<sub>原</sub> + [1000 0001]<sub>原</sub>= [0000 0001]<sub>反</sub> + [1111 1110]<sub>反</sub> = [1111 1111]<sub>反</sub> = [1000 0000]<sub>原</sub> = -0</p>
</blockquote>
<p>发现用反码计算减法, 结果的真值部分是正确的. 而唯一的问题其实就出现在”0”这个特殊的数值上. 虽然人们理解上+0和-0是一样的, 但是0带符号是没有任何意义的. 而且会有[0000 0000]<sub>原</sub>和[1000 0000]<sub>原</sub>两个编码表示0.</p>
<p>于是补码的出现, 解决了0的符号以及两个编码的问题:</p>
<blockquote>
<p>1-1 = 1 + (-1) = [0000 0001]<sub>原</sub> + [1000 0001]<sub>原</sub> = [0000 0001]<sub>补</sub> + [1111 1111]<sub>补</sub> = [0000 0000]<sub>补</sub>=[0000 0000]<sub>原</sub></p>
</blockquote>
<p>这样0用[0000 0000]表示, 而以前出现问题的-0则不存在了.而且可以用[1000 0000]表示-128:</p>
<blockquote>
<p>(-1) + (-127) = [1000 0001]<sub>原</sub> + [1111 1111]<sub>原</sub> = [1111 1111]<sub>补</sub> + [1000 0001]<sub>补</sub> = [1000 0000]<sub>补</sub></p>
</blockquote>
<p>-1-127的结果应该是-128, 在用补码运算的结果中, [1000 0000]<sub>补</sub> 就是-128. 但是注意因为实际上是使用以前的-0的补码来表示-128, 所以-128并没有原码和反码表示.(对-128的补码表示[1000 0000]<sub>补</sub>算出来的原码是[0000 0000]<sub>原</sub>, 这是不正确的)</p>
<p>使用补码, 不仅仅修复了0的符号以及存在两个编码的问题, 而且还能够多表示一个最低数. 这就是为什么8位二进制, 使用原码或反码表示的范围为[-127, +127], 而使用补码表示的范围为[-128, 127].</p>
<p>因为机器使用补码, 所以对于编程中常用到的32位int类型, 可以表示范围是: [-231, 231-1] 因为第一位表示的是符号位.而使用补码表示时又可以多保存一个最小值.</p>
<p>Ps：<a href="http://www.cnblogs.com/zhangziqiu/archive/2011/03/30/ComputerCode.html" target="_blank" rel="external">原文</a> 下面还有讲解原反补码的再深入的第四部分这里就不做摘要了。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>说起要转载的这篇文章还有个故事，开发工作中涉及通讯协议的部分，一直在用Windows系统自带的计算器（程序员模式）计算各种标志位掩码的真实值，偶然的机会同事问我有个二进制值为什么转换出来是负数而不是想要的值，而我转换的过程从来没有发现这个问题，结果不同之处就是在字长的选择上，同样的二进制10000000，当选择字节后转换为十进制时，结果是-128，而在其它字长（如字，双字，四字）的情况下就是128，然后就惊奇的发现了一个错了好多年的认知 ——“Windows计算器里的二进制表示是原码显示”（补码显示才对），然后就想起了大学时好多课程里提到的原反补码，于是也就找到了这篇简明扼要的介绍原反补码的文章。<br>]]>
    
    </summary>
    
      <category term="二进制" scheme="http://jellybins.github.io/tags/%E4%BA%8C%E8%BF%9B%E5%88%B6/"/>
    
      <category term="原反补码" scheme="http://jellybins.github.io/tags/%E5%8E%9F%E5%8F%8D%E8%A1%A5%E7%A0%81/"/>
    
      <category term="计算机基础" scheme="http://jellybins.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[SetTimeout，SetInterval传参]]></title>
    <link href="http://jellybins.github.io/2013/09/15/SetTimeout%EF%BC%8CSetInterval%E4%BC%A0%E5%8F%82/"/>
    <id>http://jellybins.github.io/2013/09/15/SetTimeout，SetInterval传参/</id>
    <published>2013-09-15T07:16:18.000Z</published>
    <updated>2015-08-21T07:47:54.027Z</updated>
    <content type="html"><![CDATA[<h2 id="方法一：">方法一：</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> userName=”jack”;</span><br><span class="line"><span class="comment">//根据用户名显示欢迎信息</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params">_name</span>)</span>&#123;</span><br><span class="line">    alert(“hello,”+_name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//用字符串形式,函数及变量必须为全局作用域</span></span><br><span class="line"><span class="built_in">window</span>.setTimeout(“hello(userName)”,<span class="number">3000</span>);</span><br></pre></td></tr></table></figure>
<h2 id="方法二：">方法二：</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> userName=”jack”;</span><br><span class="line"><span class="comment">//根据用户名显示欢迎信息</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params">_name</span>)</span>&#123;</span><br><span class="line">    alert(“hello,”+_name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建一个函数，用于返回一个无参数函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_hello</span>(<span class="params">_name</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        hello(_name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回值为函数形式，变量名及调用的函数可以是局部作用域</span></span><br><span class="line"><span class="built_in">window</span>.setTimeout(_hello(userName),<span class="number">3000</span>);</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="方法三：">方法三：</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> userName=”jack”;</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据用户名显示欢迎信息</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params">_name</span>)</span>&#123;</span><br><span class="line">    alert(“hello,”+_name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//*=============================================================</span></span><br><span class="line"><span class="comment">//*   功能： 修改 window.setInterval ，使之可以传递参数和对象参数</span></span><br><span class="line"><span class="comment">//*   方法： setInterval (回调函数,时间,参数1,,参数n)  参数可为对象(如数组等)</span></span><br><span class="line"><span class="comment">//*=============================================================</span></span><br><span class="line"><span class="keyword">var</span> __sto = setInterval;</span><br><span class="line"></span><br><span class="line"><span class="comment">//更改setTimeout,setInterval方法原型</span></span><br><span class="line"><span class="built_in">window</span>.setInterval = <span class="function"><span class="keyword">function</span>(<span class="params">callback,timeout,param</span>)</span>&#123;     </span><br><span class="line">    <span class="keyword">var</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>,<span class="number">2</span>);     </span><br><span class="line">    <span class="keyword">var</span> _cb = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;     </span><br><span class="line">        callback.apply(<span class="literal">null</span>,args);     </span><br><span class="line">    &#125;     </span><br><span class="line">    __sto(_cb,timeout);     </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.setInterval(hello,<span class="number">3000</span>,userName);</span><br></pre></td></tr></table></figure>
<h2 id="关于“this”">关于“this”</h2><blockquote>
<p>当你向setTimeout()(或者其他函数也行)传递一个函数时,该函数中的this会指向一个错误的值。由于setTimeout()调用的代码运行在与所在函数完全分离的执行环境上，这会导致，这些代码中包含的 this 关键字会指向 window (全局对象)对象，这和所期望的this的值是不一样的。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="方法一：">方法一：</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> userName=”jack”;</span><br><span class="line"><span class="comment">//根据用户名显示欢迎信息</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params">_name</span>)</span>&#123;</span><br><span class="line">    alert(“hello,”+_name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//用字符串形式,函数及变量必须为全局作用域</span></span><br><span class="line"><span class="built_in">window</span>.setTimeout(“hello(userName)”,<span class="number">3000</span>);</span><br></pre></td></tr></table></figure>
<h2 id="方法二：">方法二：</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> userName=”jack”;</span><br><span class="line"><span class="comment">//根据用户名显示欢迎信息</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params">_name</span>)</span>&#123;</span><br><span class="line">    alert(“hello,”+_name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建一个函数，用于返回一个无参数函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_hello</span>(<span class="params">_name</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        hello(_name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回值为函数形式，变量名及调用的函数可以是局部作用域</span></span><br><span class="line"><span class="built_in">window</span>.setTimeout(_hello(userName),<span class="number">3000</span>);</span><br></pre></td></tr></table></figure>]]>
    
    </summary>
    
      <category term="SetInterval" scheme="http://jellybins.github.io/tags/SetInterval/"/>
    
      <category term="SetTimeout" scheme="http://jellybins.github.io/tags/SetTimeout/"/>
    
      <category term="JavaScript" scheme="http://jellybins.github.io/categories/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[查看Ubuntu版本号]]></title>
    <link href="http://jellybins.github.io/2013/08/19/%E6%9F%A5%E7%9C%8BUbuntu%E7%89%88%E6%9C%AC%E5%8F%B7/"/>
    <id>http://jellybins.github.io/2013/08/19/查看Ubuntu版本号/</id>
    <published>2013-08-19T07:04:45.000Z</published>
    <updated>2015-08-20T02:40:00.544Z</updated>
    <content type="html"><![CDATA[<h2 id="方法一：">方法一：</h2><p>在终端中执行下列指令：</p>
<blockquote>
<p><strong>cat /etc/issue</strong></p>
</blockquote>
<p>可以查看当前正在运行的 Ubuntu 的版本号。其输出结果类似下面的内容：</p>
<blockquote>
<p>Ubuntu 14.04.2 LTS</p>
</blockquote>
<h2 id="方法二：">方法二：</h2><p>使用 lsb_release 命令也可以查看 Ubuntu 的版本号，与方法一相比，内容更为详细。执行指令如下：</p>
<blockquote>
<p><strong>lsb_release -a</strong></p>
</blockquote>
<p>将输出结果：</p>
<blockquote>
<p>Distributor ID: Ubuntu<br>Description: Ubuntu 14.04.2 LTS<br>Release: 14.04<br>Codename: trusty</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="方法一：">方法一：</h2><p>在终端中执行下列指令：</p>
<blockquote>
<p><strong>cat /etc/issue</strong></p>
</blockquote>
<p>可以查看当前正在运行的 Ubuntu 的版本号。其输出结果]]>
    </summary>
    
      <category term="Ubuntu" scheme="http://jellybins.github.io/tags/Ubuntu/"/>
    
      <category term="版本号查看" scheme="http://jellybins.github.io/tags/%E7%89%88%E6%9C%AC%E5%8F%B7%E6%9F%A5%E7%9C%8B/"/>
    
      <category term="Linux" scheme="http://jellybins.github.io/categories/Linux/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[apt-get upgrade和dist-upgrade的区别]]></title>
    <link href="http://jellybins.github.io/2013/08/18/apt-get-upgrade%E5%92%8Cdist-upgrade%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://jellybins.github.io/2013/08/18/apt-get-upgrade和dist-upgrade的区别/</id>
    <published>2013-08-18T07:24:41.000Z</published>
    <updated>2015-08-20T02:41:08.812Z</updated>
    <content type="html"><![CDATA[<p>Debian/Ubuntu Linux使用apt升级时都是执行如下命令:</p>
<blockquote>
<p><strong>apt-get update<br>apt-get upgrade（或）apt-get dist-upgrade</strong></p>
</blockquote>
<p>但是常常有人会问，upgrade和dist-upgrade有何不同，仔细查查，似乎大家对upgrade和dist-upgrade的解释都有点不同,在此也记录下自己的看法.<br><a id="more"></a> </p>
<ul>
<li><p><strong>upgrade</strong>：系统将现有的Package升级，如果有相依性的问题，而此相依性需要安装其它新的Package或影响到其它Package的相依性时，此Package就不会被升级，会保留下来。</p>
</li>
<li><p><strong>dist-upgrade</strong>：可以聪明的解决相依性的问题，如果有相依性问题，需要安装/移除新的Package，就会试着去安装/移除它(所以通常这个会被认为是有点风险的升级)。</p>
</li>
<li><p><strong>总结</strong>：apt-get upgrade 和 apt-get dist-upgrade 本质上是没有什么不同的。只不过，dist-upgrade会识别出当依赖关系改变的情形并作出处理，而upgrade对此情形不处理。</p>
</li>
<li><p><strong>示例</strong>：如软件包 a 原先依赖 b c d，但是在源里面可能已经升级了，现在是 a 依赖 b c e。这种情况下，dist-upgrade 会删除 d 安装 e，并把 a 软件包升级，而 upgrade 会认为<br>依赖关系改变而拒绝升级 a 软件包。</p>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>Debian/Ubuntu Linux使用apt升级时都是执行如下命令:</p>
<blockquote>
<p><strong>apt-get update<br>apt-get upgrade（或）apt-get dist-upgrade</strong></p>
</blockquote>
<p>但是常常有人会问，upgrade和dist-upgrade有何不同，仔细查查，似乎大家对upgrade和dist-upgrade的解释都有点不同,在此也记录下自己的看法.<br>]]>
    
    </summary>
    
      <category term="Ubuntu" scheme="http://jellybins.github.io/tags/Ubuntu/"/>
    
      <category term="命令行" scheme="http://jellybins.github.io/tags/%E5%91%BD%E4%BB%A4%E8%A1%8C/"/>
    
      <category term="系统升级" scheme="http://jellybins.github.io/tags/%E7%B3%BB%E7%BB%9F%E5%8D%87%E7%BA%A7/"/>
    
      <category term="Linux" scheme="http://jellybins.github.io/categories/Linux/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hibernate实体关系判断]]></title>
    <link href="http://jellybins.github.io/2013/08/17/Hibernate%E5%AE%9E%E4%BD%93%E5%85%B3%E7%B3%BB%E5%88%A4%E6%96%AD/"/>
    <id>http://jellybins.github.io/2013/08/17/Hibernate实体关系判断/</id>
    <published>2013-08-17T07:01:41.000Z</published>
    <updated>2015-08-20T02:37:54.501Z</updated>
    <content type="html"><![CDATA[<p>在使用hibernate配置实体间关系时，对于我总有个解不开的魔咒——思考两个实体间到底是一对一、一对多还是多对多的时候我总爱从指定的唯一个体出发来思考。比如学生和班级是很明显的一对多关系，但是从具体的个体出发，具体的某个学生只有一个具体的班级跟他相对应，变成了一对一关系然后就配置错误了，每次配置的时候都会跟自己强调千万要注意，但还是不长脑子，然后就在我要放弃治疗的时候突然在草稿上摸索出了这个关系总结的表格（让头脑比较清醒的淫们贱笑了哈，就当这是还算正确的歪理邪说好了），都是从固定个体出发，经我初步验证是正确的。<br><a id="more"></a><br>比如还是上面的例子——（学生和班级）</p>
<ol>
<li>固定的学生到班级 （正向） 一对一 （固定学生存在一个班级）</li>
<li>固定班级到学生 （反向） 多对一 （固定班级有多个学生）</li>
<li>学生到班级 （关系配置） 一对多</li>
</ol>
<p>再举一个例子——（学生和课程）</p>
<ol>
<li>固定学生到课程 （正向） 一对多（固定学生可选多门课）</li>
<li>固定课程到学生（反向） 一对多 （固定课程可供多个学生选）</li>
<li>学生到课程 （关系配置） 多对多</li>
</ol>
<hr>
<h2 id="关系总结">关系总结</h2><table>
<thead>
<tr>
<th style="text-align:center">正向</th>
<th style="text-align:center">反向</th>
<th style="text-align:center">关系配置</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">一对一</td>
<td style="text-align:center">多对一</td>
<td style="text-align:center">一对多</td>
</tr>
<tr>
<td style="text-align:center">一对多</td>
<td style="text-align:center">一对多</td>
<td style="text-align:center">多对多</td>
</tr>
<tr>
<td style="text-align:center">一对一</td>
<td style="text-align:center">一对一</td>
<td style="text-align:center">一对一</td>
</tr>
<tr>
<td style="text-align:center">多对一</td>
<td style="text-align:center">一对一</td>
<td style="text-align:center">多对一</td>
</tr>
</tbody>
</table>
]]></content>
    <summary type="html">
    <![CDATA[<p>在使用hibernate配置实体间关系时，对于我总有个解不开的魔咒——思考两个实体间到底是一对一、一对多还是多对多的时候我总爱从指定的唯一个体出发来思考。比如学生和班级是很明显的一对多关系，但是从具体的个体出发，具体的某个学生只有一个具体的班级跟他相对应，变成了一对一关系然后就配置错误了，每次配置的时候都会跟自己强调千万要注意，但还是不长脑子，然后就在我要放弃治疗的时候突然在草稿上摸索出了这个关系总结的表格（让头脑比较清醒的淫们贱笑了哈，就当这是还算正确的歪理邪说好了），都是从固定个体出发，经我初步验证是正确的。<br>]]>
    
    </summary>
    
      <category term="Hibernate" scheme="http://jellybins.github.io/tags/Hibernate/"/>
    
      <category term="ORM配置" scheme="http://jellybins.github.io/tags/ORM%E9%85%8D%E7%BD%AE/"/>
    
      <category term="Hibernate" scheme="http://jellybins.github.io/categories/Hibernate/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[从Ubuntu LTS版本升级至普通版本]]></title>
    <link href="http://jellybins.github.io/2013/08/15/%E4%BB%8EUbuntu-LTS%E7%89%88%E6%9C%AC%E5%8D%87%E7%BA%A7%E8%87%B3%E6%99%AE%E9%80%9A%E7%89%88%E6%9C%AC/"/>
    <id>http://jellybins.github.io/2013/08/15/从Ubuntu-LTS版本升级至普通版本/</id>
    <published>2013-08-15T07:08:45.000Z</published>
    <updated>2015-08-20T02:40:56.728Z</updated>
    <content type="html"><![CDATA[<h2 id="以Ubuntu_14-04_LTS版本升级至14-10_普通版本为例">以Ubuntu 14.04 LTS版本升级至14.10 普通版本为例</h2><ol>
<li><p>首先更新一下系统：</p>
<blockquote>
<p><strong>sudo apt-get update<br>sudo apt-get dist-upgrade</strong></p>
</blockquote>
</li>
<li><p>接下来，需要安装更新管理器的核心：</p>
<blockquote>
<p><strong>sudo apt-get install update-manager-core<br>sudo do-release-upgrade -d</strong></p>
</blockquote>
</li>
</ol>
<blockquote>
<p>命令解释：do-release-upgrade 命令是帮助我们寻找最新的稳定版本，而 -d 参数意思是包括非稳定版本。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="以Ubuntu_14-04_LTS版本升级至14-10_普通版本为例">以Ubuntu 14.04 LTS版本升级至14.10 普通版本为例</h2><ol>
<li><p>首先更新一下系统：</p>
<blockquote>
<p><strong>sudo ap]]>
    </summary>
    
      <category term="Ubuntu" scheme="http://jellybins.github.io/tags/Ubuntu/"/>
    
      <category term="命令行" scheme="http://jellybins.github.io/tags/%E5%91%BD%E4%BB%A4%E8%A1%8C/"/>
    
      <category term="系统升级" scheme="http://jellybins.github.io/tags/%E7%B3%BB%E7%BB%9F%E5%8D%87%E7%BA%A7/"/>
    
      <category term="Linux" scheme="http://jellybins.github.io/categories/Linux/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hibernate配置inverse与cascade详解]]></title>
    <link href="http://jellybins.github.io/2013/07/28/Hibernate%E9%85%8D%E7%BD%AEinverse%E4%B8%8Ecascade%E8%AF%A6%E8%A7%A3/"/>
    <id>http://jellybins.github.io/2013/07/28/Hibernate配置inverse与cascade详解/</id>
    <published>2013-07-28T11:57:18.000Z</published>
    <updated>2015-08-21T12:32:18.843Z</updated>
    <content type="html"><![CDATA[<h2 id="inverse配置">inverse配置</h2><p>inverse决定是否把对对象中集合的改动反映到数据库中，所以inverse只对集合起作用，也就是只对one-to-many或many-to-many有效（因为只有这两种关联关系包含集合，而one-to-one和many-to-one只含有关系对方的一个引用）。inverse默认值为false，即多的一方默认不放弃维护关系。</p>
<h2 id="cascade配置">cascade配置</h2><p>cascade决定是否把对对象的改动反映到数据库中，所以cascade对所有的关联关系都起作用（因为关联关系就是指对象之间的关联关系）即对一方的CRUD操作，是否级联到相关联的一方。<br>在一对多关系中，通常设置为由多方维护关系，一方设置为放弃维护关系。同时对一方的操作，如删除，应级联引用的多方。</p>
<h2 id="例(学生与班级)">例(学生与班级)</h2><a id="more"></a>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">class</span> <span class="attribute">name</span>=<span class="value">"com.jellybins.Clazz"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">id</span>&gt;</span>...<span class="tag">&lt;/<span class="title">id</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--此处inverse，cascade设置的对象都是班级，即班级不负责关系的维护，班级删除操作级联删除该班级的学生--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">set</span> <span class="attribute">name</span>=<span class="value">"students"</span> <span class="attribute">inverse</span>=<span class="value">"true"</span> <span class="attribute">cascade</span>=<span class="value">"delete"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="title">key</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!--此处设置的是students集合中外键列的名称，此外键列值用于匹配班级的id列--&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">column</span> <span class="attribute">name</span>=<span class="value">"calzz-id"</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!--此处设置为一对多关系多方集合中对象所属的类--&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">one-to-many</span> <span class="attribute">class</span>=<span class="value">"com.rauy.Student"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="title">key</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="title">set</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">class</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h2 id="inverse配置">inverse配置</h2><p>inverse决定是否把对对象中集合的改动反映到数据库中，所以inverse只对集合起作用，也就是只对one-to-many或many-to-many有效（因为只有这两种关联关系包含集合，而one-to-one和many-to-one只含有关系对方的一个引用）。inverse默认值为false，即多的一方默认不放弃维护关系。</p>
<h2 id="cascade配置">cascade配置</h2><p>cascade决定是否把对对象的改动反映到数据库中，所以cascade对所有的关联关系都起作用（因为关联关系就是指对象之间的关联关系）即对一方的CRUD操作，是否级联到相关联的一方。<br>在一对多关系中，通常设置为由多方维护关系，一方设置为放弃维护关系。同时对一方的操作，如删除，应级联引用的多方。</p>
<h2 id="例(学生与班级)">例(学生与班级)</h2>]]>
    
    </summary>
    
      <category term="ORM配置" scheme="http://jellybins.github.io/tags/ORM%E9%85%8D%E7%BD%AE/"/>
    
      <category term="cascade" scheme="http://jellybins.github.io/tags/cascade/"/>
    
      <category term="inverse" scheme="http://jellybins.github.io/tags/inverse/"/>
    
      <category term="Hibernate" scheme="http://jellybins.github.io/categories/Hibernate/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[关于Java线程两种同步方法的理解]]></title>
    <link href="http://jellybins.github.io/2013/07/23/%E5%85%B3%E4%BA%8EJava%E7%BA%BF%E7%A8%8B%E4%B8%A4%E7%A7%8D%E5%90%8C%E6%AD%A5%E6%96%B9%E6%B3%95%E7%9A%84%E7%90%86%E8%A7%A3/"/>
    <id>http://jellybins.github.io/2013/07/23/关于Java线程两种同步方法的理解/</id>
    <published>2013-07-23T09:14:26.000Z</published>
    <updated>2015-08-21T13:30:03.686Z</updated>
    <content type="html"><![CDATA[<p>在阅读李兴华老师java开发实战经典一书，在java代码块级及方法级同步方法，起初讲解还是很清楚，但在讲解到模拟java多线程死锁时，使用上述代码块级同步方法让我对代码块级同步方法中同步对象的设置产生了较大的疑惑。</p>
<h2 id="模拟死锁">模拟死锁</h2><p>有张三，李四两人，张三对李四说：“你给我画，我就给你书”，李四对张三说：“你给我你的书，我就给你画”。模拟代码如下：</p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/* Test.java */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Sisuo s1 = <span class="keyword">new</span> Sisuo();</span><br><span class="line">		Sisuo s2 = <span class="keyword">new</span> Sisuo();</span><br><span class="line">		s1.setFlag(<span class="keyword">true</span>);</span><br><span class="line">		s2.setFlag(<span class="keyword">false</span>);</span><br><span class="line">		Thread t1 = <span class="keyword">new</span> Thread(s1);</span><br><span class="line">		Thread t2 = <span class="keyword">new</span> Thread(s2);</span><br><span class="line">		t1.start();</span><br><span class="line">		t2.start();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Zhangsan</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"你给我画，我就给你书"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"张三得到了画"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Lisi</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"你给我书，我就给你画"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"李四得到了书"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Sisuo.java */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sisuo</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> Zhangsan zs = <span class="keyword">new</span> Zhangsan();</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> Lisi ls = <span class="keyword">new</span> Lisi();</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFlag</span><span class="params">(<span class="keyword">boolean</span> flag)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.flag = flag;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (flag) &#123;</span><br><span class="line">			<span class="keyword">synchronized</span> (zs) &#123;</span><br><span class="line">				System.out.println(<span class="string">"线程"</span> + Thread.currentThread().getName()</span><br><span class="line">						+ <span class="string">"获得了zs对象的锁"</span>);</span><br><span class="line">				zs.say();</span><br><span class="line">				<span class="keyword">try</span> &#123;</span><br><span class="line">					Thread.sleep(<span class="number">300</span>);</span><br><span class="line">				&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">					e.printStackTrace();</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">synchronized</span> (ls) &#123;</span><br><span class="line">					System.out.println(<span class="string">"线程"</span> + Thread.currentThread().getName()</span><br><span class="line">							+ <span class="string">"获得了ls对象的锁"</span>);</span><br><span class="line">					zs.get();</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">synchronized</span> (ls) &#123;</span><br><span class="line">				System.out.println(<span class="string">"线程"</span> + Thread.currentThread().getName()</span><br><span class="line">						+ <span class="string">"获得了ls对象的锁"</span>);</span><br><span class="line">				ls.say();</span><br><span class="line">				<span class="keyword">try</span> &#123;</span><br><span class="line">					Thread.sleep(<span class="number">300</span>);</span><br><span class="line">				&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">					e.printStackTrace();</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">synchronized</span> (zs) &#123;</span><br><span class="line">					System.out.println(<span class="string">"线程"</span> + Thread.currentThread().getName()</span><br><span class="line">							+ <span class="string">"获得了zs对象的锁"</span>);</span><br><span class="line">					ls.get();</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="运行结果（其中一种）">运行结果（其中一种）</h2><blockquote>
<p>线程Thread-0获得了zs对象的锁<br>你给我画，我就给你书<br>线程Thread-1获得了ls对象的锁<br>你给我书，我就给你画</p>
</blockquote>
<h2 id="代码块级同步与方法级同步区别">代码块级同步与方法级同步区别</h2><p>方法级同步：</p>
<ul>
<li>实现方法：在要标志为同步的方法前加上synchronized关键字。</li>
<li>实现原理：当调用对象的同步方法时，线程取得对象锁或监视器；如果另一个线程试图执行任何同步方 法时，他就会发现他被锁住了，进入挂起状态，直到对象监视器上的锁被释放时为止。当锁住方法的线程从方法中返回时，只有一个排队等候的线程可以访问对象。</li>
</ul>
<p>代码块级同步：</p>
<ul>
<li>临界区：需要进行互斥的代码段，而非整个方法。</li>
<li>实现方法：用synchronized来指定某个对象，此对象的锁被用来对花括号内的代码进行同步控制。</li>
<li>实现原理：在进入同步代码前，必须得到object对象的锁，如果其他线程已经得到这个锁，那么就得等到锁被释放后才能进入临界区。</li>
<li>锁的作用域：只在代码块运行的时间内。</li>
</ul>
<h2 id="代码运行结果分析">代码运行结果分析</h2><p>由于同步代码块中sleep方法的操作，使得线程t1获得zs对象的锁后睡眠，这时另一线程t2执行获得ls对象的锁然后睡眠。此后两线程无论哪个线程先醒来都需要获取另一个线程所持有的对象的锁才能继续执行，从而使得程序执行陷入死锁状态，此时Eclips控制台会有终端结束灯一直持红色状态，即程序未执行完。在对其中一同步代码块中sleep方法注释掉后，程序执行出现在未注释前从未出现的一种结果，从而进一步证明了，代码块级同步对象的设置作用。</p>
<h2 id="更改后运行结果">更改后运行结果</h2><blockquote>
<p>线程Thread-0获得了zs对象的锁<br>你给我画，我就给你书<br>线程Thread-0获得了ls对象的锁<br>张三得到了画<br>线程Thread-1获得了ls对象的锁<br>你给我书，我就给你画<br>线程Thread-1获得了zs对象的锁<br>李四得到了书</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>在阅读李兴华老师java开发实战经典一书，在java代码块级及方法级同步方法，起初讲解还是很清楚，但在讲解到模拟java多线程死锁时，使用上述代码块级同步方法让我对代码块级同步方法中同步对象的设置产生了较大的疑惑。</p>
<h2 id="模拟死锁">模拟死锁</h2><p>有张三，李四两人，张三对李四说：“你给我画，我就给你书”，李四对张三说：“你给我你的书，我就给你画”。模拟代码如下：</p>]]>
    
    </summary>
    
      <category term="代码块级同步" scheme="http://jellybins.github.io/tags/%E4%BB%A3%E7%A0%81%E5%9D%97%E7%BA%A7%E5%90%8C%E6%AD%A5/"/>
    
      <category term="方法级同步" scheme="http://jellybins.github.io/tags/%E6%96%B9%E6%B3%95%E7%BA%A7%E5%90%8C%E6%AD%A5/"/>
    
      <category term="线程" scheme="http://jellybins.github.io/tags/%E7%BA%BF%E7%A8%8B/"/>
    
      <category term="Java" scheme="http://jellybins.github.io/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Html中引入JS文件乱码问题]]></title>
    <link href="http://jellybins.github.io/2013/07/21/Html%E4%B8%AD%E5%BC%95%E5%85%A5JS%E6%96%87%E4%BB%B6%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98/"/>
    <id>http://jellybins.github.io/2013/07/21/Html中引入JS文件乱码问题/</id>
    <published>2013-07-21T09:59:11.000Z</published>
    <updated>2015-08-21T10:08:41.860Z</updated>
    <content type="html"><![CDATA[<h2 id="乱码问题">乱码问题</h2><p>在JS框架学习时，碰到了如下问题，在Html页面中引入的JS文件出现乱码，一开始以为是未指定默认的Html页面编码格式造成，但是通过head标签中<code>&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;</code> charset属性设置Html页面编码格式后，引入JS文件还是乱码，按照原本的理解如果JS是直接写在Html页面中，会按照页面编码的格式对其进行编解码，所以猜测如果是引用的话，也应该是按照这样的方式对JS文件进行编解码，但事实是如果未对引入的JS文件指定正确编码（默认JS文件编码方式与HTML页面编码不同情况下），则JS会按照其真正的文本存储编码方式进行编码，但解码时却是按照指定的HTML页面的编码进行解码，从而出现乱码问题。</p>
<h2 id="解决方法">解决方法</h2><p>一番尝试后发现上述问题的出现是由于在引入JS文件时忽略了其中的一个charset属性，<code>&lt;script type=&quot;text/javascript&quot; src=&quot;#&quot; charset=&quot;gbk&quot;&gt;</code>，如要引入的JS文件的文本存储编码格式为GBK，Html页面指定的页面编码设置（采用如上文设置方式）为UTF-8，但是引入JS处指定编码charset属性为GBK则不会有乱码问题出现。</p>
<a id="more"></a>
<h2 id="结论">结论</h2><p>在指定引入JS文本存储编码（charset属性）的情况下，浏览器会对JS文件按照charset解码JS文件；如果引入JS时未指定文本存储编码，则按照HTML页面指定的编码方式对JS文件解码，即浏览器是优先按照引入JS文件处指定的编码方式对JS文件进行解码的，</p>
<h2 id="附Eclipse中设置JS文件默认编码">附Eclipse中设置JS文件默认编码</h2><ul>
<li><p>方法1：window-&gt;Preferences打开属性页，General-&gt;Content Type,点击右边的Text，下面会出现<em>.js(locked)，选中</em>.js(locked)，在最下面的Default Encoding中写入utf-8，再点击update按钮即可。</p>
</li>
<li><p>方法2：在工程上右键Properties。 选中Resource，在右边的Text file Encoding中点击Other，选utf-8即可，不推荐方法2， 除非你的其他代码都是utf-8的。</p>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="乱码问题">乱码问题</h2><p>在JS框架学习时，碰到了如下问题，在Html页面中引入的JS文件出现乱码，一开始以为是未指定默认的Html页面编码格式造成，但是通过head标签中<code>&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;</code> charset属性设置Html页面编码格式后，引入JS文件还是乱码，按照原本的理解如果JS是直接写在Html页面中，会按照页面编码的格式对其进行编解码，所以猜测如果是引用的话，也应该是按照这样的方式对JS文件进行编解码，但事实是如果未对引入的JS文件指定正确编码（默认JS文件编码方式与HTML页面编码不同情况下），则JS会按照其真正的文本存储编码方式进行编码，但解码时却是按照指定的HTML页面的编码进行解码，从而出现乱码问题。</p>
<h2 id="解决方法">解决方法</h2><p>一番尝试后发现上述问题的出现是由于在引入JS文件时忽略了其中的一个charset属性，<code>&lt;script type=&quot;text/javascript&quot; src=&quot;#&quot; charset=&quot;gbk&quot;&gt;</code>，如要引入的JS文件的文本存储编码格式为GBK，Html页面指定的页面编码设置（采用如上文设置方式）为UTF-8，但是引入JS处指定编码charset属性为GBK则不会有乱码问题出现。</p>]]>
    
    </summary>
    
      <category term="charset属性" scheme="http://jellybins.github.io/tags/charset%E5%B1%9E%E6%80%A7/"/>
    
      <category term="乱码" scheme="http://jellybins.github.io/tags/%E4%B9%B1%E7%A0%81/"/>
    
      <category term="JavaScript" scheme="http://jellybins.github.io/categories/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用Hexo在GitHub上搭建静态博客]]></title>
    <link href="http://jellybins.github.io/2013/07/16/%E4%BD%BF%E7%94%A8Hexo%E5%9C%A8GitHub%E4%B8%8A%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/"/>
    <id>http://jellybins.github.io/2013/07/16/使用Hexo在GitHub上搭建静态博客/</id>
    <published>2013-07-16T08:32:23.000Z</published>
    <updated>2015-08-20T02:41:53.227Z</updated>
    <content type="html"><![CDATA[<p>当初搭建这个静态博客参考了好几篇文章，但是还是碰到了不少问题，想想应该整理一下让后来人少走点弯路，我就是这么伟大，请给我点32个赞（此处应有掌声）。</p>
<h2 id="工欲善其事_必先利其器">工欲善其事 必先利其器</h2><ol>
<li><p>Git客户端(博客部署)</p>
<p><a href="https://windows.github.com/" target="_blank" rel="external">GitHub for Windows（已更名为GitHub Desktop） 下载</a></p>
<blockquote>
<p>GitHub for Windows是先下载安装器，然后运行安装器在线安装，如果在线安装过程中出现下载进度不动或下载不成功的情况，恭喜你被墙了，请自行查找科学上网方法，设置为系统全局代理后再尝试。</p>
</blockquote>
</li>
<li><p>Node.js(Hexo依赖)</p>
<p><a href="https://nodejs.org/" target="_blank" rel="external">Node.js 下载</a></p>
<blockquote>
<p>Node.js安装完成后会自动添加环境变量，如果在步骤3中使用npm命令提示不存在，则请自行在环境变量Path中添加如下内容（默认Node.js安装目录为C:\Program Files\nodejs）：<br><strong>;C:\Program Files\nodejs\node_modules\npm</strong></p>
</blockquote>
</li>
<li><p>Hexo(博客框架，使用Markdown解析文章)</p>
<p><a href="https://hexo.io/zh-cn/" target="_blank" rel="external">Hexo 官网（无需下载）</a></p>
<blockquote>
<p>完成上述步骤后，双击桌面上的Git Shell，输入如下npm命令回车执行等待安装完成即可：<br><strong>npm install -g hexo-cli</strong></p>
</blockquote>
</li>
<li><p>创建Hexo工作空间</p>
<blockquote>
<p>安装 Hexo 完成后，在磁盘任意位置建立文件夹比如D:/hexo,双击桌面上Git Shell，通过CD命令切换到该目录后执行如下两行命令初始化该工作空间并安装hexo所有插件：<br><strong>hexo init</strong><br><strong>npm install</strong></p>
</blockquote>
</li>
</ol>
<a id="more"></a>
<h2 id="创建博客容身之所">创建博客容身之所</h2><ul>
<li>注册GitHub账号</li>
</ul>
<ol>
<li><p>登录<a href="https://github.com/" target="_blank" rel="external">GitHub</a>，选择Sign Up注册GitHub账户，注意此处注册的账号名称决定将来访问你的博客的路径。比如你注册的账号用户名为jellybins（以下部分也用该示例），则将来访问你博客的路径为<a href="http://jellybins.github.io。" target="_blank" rel="external">http://jellybins.github.io。</a></p>
</li>
<li><p>创建GitHub博客仓储，注册完成后登录GitHub选择New Repository，创建名称为jellybins.github.io的Repository(jellybins为示例，必须保证Repository名称中该部分和注册账户名称一致)。</p>
</li>
<li><p>首次创建后等待几分钟左右审核，之后即可访问静态主页如<a href="http://jellybins.github.io（jellybins为示例）" target="_blank" rel="external">http://jellybins.github.io（jellybins为示例）</a> 。</p>
</li>
</ol>
<ul>
<li>登录GitHub for Windows，部署博客内容至GitHub</li>
</ul>
<ol>
<li><p>双击击桌面上GitHub 图标，登录上述注册的GitHub账户，程序会自动设置GitHub全局变量并添加SSH访问密钥。</p>
</li>
<li><p>进入Hexo工作空间目录中，用记事本等文本编辑器打开_config.yml文件，更改deploy项内容如下（注意上述键和值之间有空格，格式不正确会导致部署失败，jellybins为示例，请更改为自己注册的账户名）：</p>
<blockquote>
<p><strong>deploy:<br>type: git<br>repo: git@github.com:jellybins/jellybins.github.io.git</strong></p>
</blockquote>
</li>
<li><p>双击桌面上Git Shell图标，通过CD命令切换到Hexo工作空间目录，然后执行如下命令完成博客部署至GitHub</p>
<blockquote>
<p><strong>hexo clean<br>hexo generate<br>hexo server（可选命令——本地<a href="http://localhost:4000端口预览博客效果，快捷键Ctrl+C停止预览）" target="_blank" rel="external">http://localhost:4000端口预览博客效果，快捷键Ctrl+C停止预览）</a><br>hexo deploy</strong></p>
</blockquote>
</li>
<li><p>以后每次完成新博客文章要发布时，重新执行步骤3中各命令即可。</p>
</li>
<li><p>访问博客地址<a href="http://jellybins.github.io查看效果（jellybins为示例）。" target="_blank" rel="external">http://jellybins.github.io查看效果（jellybins为示例）。</a></p>
</li>
</ol>
<h2 id="博客设置及主题更换">博客设置及主题更换</h2><ol>
<li><p>进入Hexo工作空间目录，用记事本或EditPlus等文本编辑工具打开_config.yml文件。</p>
</li>
<li><p>各参数作用：</p>
<ul>
<li>title        网站标题</li>
<li>subtitle       网站副标题</li>
<li>description  网站描述</li>
<li>author       您的名字</li>
<li>language     网站使用的语言</li>
<li>theme        当前主题名称（通过更改该名称更改博客使用的主题）</li>
<li>deploy       部署配置（上面将博客部署至GitHub已提到）</li>
</ul>
</li>
<li><p>上述各参数的值在书写时一定要注意每项参数冒号后要有一个英文空格符，然后再填写该项的值。</p>
</li>
<li><p>更改主题方法：</p>
<p>a. 从<a href="https://github.com/hexojs/hexo/wiki/Themes" target="_blank" rel="external">该链接</a>选择你想要使用的Hexo主题。</p>
<p>b. 双击Git Shell图标，CD命令切换至Hexo工作空间目录后，执行如下命令（以yilia主题为例）:</p>
<blockquote>
<p><strong>git clone <a href="https://github.com/litten/hexo-theme-yilia.git" target="_blank" rel="external">https://github.com/litten/hexo-theme-yilia.git</a> themes/yilia</strong></p>
</blockquote>
<p>c. 修改_config.yml文件的theme值如下：</p>
<blockquote>
<p><strong>theme: yilia</strong>(注意参数与值之间空格)</p>
</blockquote>
<p>d. 当主题有更新时，双击Git Shell图标，通过CD命令进入Hexo工作空间/themes/yilia目录后执行如下命令更新主题：</p>
<blockquote>
<p><strong>git pull</strong></p>
</blockquote>
</li>
</ol>
<h2 id="博客文章发布">博客文章发布</h2><ol>
<li><p>创建新文章,双击Git Shell图标，CD命令切换至Hexo工作空间目录后,执行如下命令：</p>
<blockquote>
<p><strong>hexo new ‘新文章标题’</strong>(如文章标题不含空格则引号可省略)</p>
</blockquote>
</li>
<li><p>执行完上述命令会在hexo工作空间/source/_posts目录下生成”新文章标题.md”的文件，此时用记事本等文本编辑器工具打开文件，使用markdown语法编辑文章即可。</p>
</li>
<li><p>编辑完成后保存上述文件，执行部署博客内容至GitHub操作中步骤3各命令后博客文章发布完成。</p>
</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>当初搭建这个静态博客参考了好几篇文章，但是还是碰到了不少问题，想想应该整理一下让后来人少走点弯路，我就是这么伟大，请给我点32个赞（此处应有掌声）。</p>
<h2 id="工欲善其事_必先利其器">工欲善其事 必先利其器</h2><ol>
<li><p>Git客户端(博客部署)</p>
<p><a href="https://windows.github.com/">GitHub for Windows（已更名为GitHub Desktop） 下载</a></p>
<blockquote>
<p>GitHub for Windows是先下载安装器，然后运行安装器在线安装，如果在线安装过程中出现下载进度不动或下载不成功的情况，恭喜你被墙了，请自行查找科学上网方法，设置为系统全局代理后再尝试。</p>
</blockquote>
</li>
<li><p>Node.js(Hexo依赖)</p>
<p><a href="https://nodejs.org/">Node.js 下载</a></p>
<blockquote>
<p>Node.js安装完成后会自动添加环境变量，如果在步骤3中使用npm命令提示不存在，则请自行在环境变量Path中添加如下内容（默认Node.js安装目录为C:\Program Files\nodejs）：<br><strong>;C:\Program Files\nodejs\node_modules\npm</strong></p>
</blockquote>
</li>
<li><p>Hexo(博客框架，使用Markdown解析文章)</p>
<p><a href="https://hexo.io/zh-cn/">Hexo 官网（无需下载）</a></p>
<blockquote>
<p>完成上述步骤后，双击桌面上的Git Shell，输入如下npm命令回车执行等待安装完成即可：<br><strong>npm install -g hexo-cli</strong></p>
</blockquote>
</li>
<li><p>创建Hexo工作空间</p>
<blockquote>
<p>安装 Hexo 完成后，在磁盘任意位置建立文件夹比如D:/hexo,双击桌面上Git Shell，通过CD命令切换到该目录后执行如下两行命令初始化该工作空间并安装hexo所有插件：<br><strong>hexo init</strong><br><strong>npm install</strong></p>
</blockquote>
</li>
</ol>]]>
    
    </summary>
    
      <category term="Hexo" scheme="http://jellybins.github.io/tags/Hexo/"/>
    
      <category term="静态博客搭建" scheme="http://jellybins.github.io/tags/%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
      <category term="杂文" scheme="http://jellybins.github.io/categories/%E6%9D%82%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="http://jellybins.github.io/2013/07/13/hello-world/"/>
    <id>http://jellybins.github.io/2013/07/13/hello-world/</id>
    <published>2013-07-13T12:46:25.000Z</published>
    <updated>2015-08-20T02:36:13.459Z</updated>
    <content type="html"><![CDATA[<h2 id="你好_世界！">你好 世界！</h2><p>这个静态博客搭起来好久了，但是还从来没动过，本来准备抽个非常空闲的时间来整理一下，把之前WordPress的博文都转移过来，看来现在比较是时候了。</p>
<h2 id="JellyBins来历">JellyBins来历</h2><p>作为一个码农，第一篇博客的标题当然该是Hello World，就像那个码农转行书法家的笑话一样。之前有用京东云擎部署WordPress搭了个博客，但是没怎么打理。前些天看到新闻说京东云要正式运营关闭试用了，然后对于我等屌丝来说只能另寻其它免费之所，所以也自然而然的选择了真正的WordPress网站，虽然被GFW墙掉了。随之而来的就是站点的名称问题，其实一直想用Jelly，但是无奈已被注册或者名字过短等种种原因只能放弃。后来午休的时候突发奇想，码农应该和Binary（二进制码）有关。然后就想到了JellyBin，还跟谷歌的安卓果冻豆系统JellyBean谐音，瞬间感觉高大上，结果要注册的时候提示是保留名称，纠结了，再后来想到这一生应该跟很多Binary有关，于是就有了现在JellyBins（还可以变作JellyBin’s，简直perfect，请原谅我的放荡不羁爱自由）。之后再搭建这个静态博客的时候也就延续使用了这个名字，所以现在的站点链接是：<a href="http://jellybins.github.io">http://jellybins.github.io</a> 。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="你好_世界！">你好 世界！</h2><p>这个静态博客搭起来好久了，但是还从来没动过，本来准备抽个非常空闲的时间来整理一下，把之前WordPress的博文都转移过来，看来现在比较是时候了。</p>
<h2 id="JellyBins来历">JellyBins来历]]>
    </summary>
    
      <category term="你好 世界" scheme="http://jellybins.github.io/tags/%E4%BD%A0%E5%A5%BD-%E4%B8%96%E7%95%8C/"/>
    
      <category term="杂文" scheme="http://jellybins.github.io/categories/%E6%9D%82%E6%96%87/"/>
    
  </entry>
  
</feed>